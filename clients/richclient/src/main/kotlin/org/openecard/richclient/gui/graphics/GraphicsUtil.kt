/****************************************************************************
 * Copyright (C) 2012 ecsec GmbH.
 * All rights reserved.
 * Contact: ecsec GmbH (info@ecsec.de)
 *
 * This file is part of the Open eCard App.
 *
 * GNU General Public License Usage
 * This file may be used under the terms of the GNU General Public
 * License version 3.0 as published by the Free Software Foundation
 * and appearing in the file LICENSE.GPL included in the packaging of
 * this file. Please review the following information to ensure the
 * GNU General Public License version 3.0 requirements will be met:
 * http://www.gnu.org/copyleft/gpl.html.
 *
 * Other Usage
 * Alternatively, this file may be used in accordance with the terms
 * and conditions contained in a signed written agreement between
 * you and ecsec GmbH.
 *
 ***************************************************************************/

package org.openecard.richclient.gui.graphics

import io.github.oshai.kotlinlogging.KotlinLogging
import java.awt.Component
import java.awt.Dimension
import java.awt.Graphics
import java.awt.Image
import java.awt.image.BufferedImage
import javax.swing.Icon

private val LOG = KotlinLogging.logger { }

/**
 * A collection of methods for creating images using classes generated by SVG2Java. <br></br><br></br>
 *
 * SVG2Java is available at [https://code.google.com/p/svg2java/](https://code.google.com/p/svg2java/).
 *
 * @author Johannes Schm√∂lz
 */
object GraphicsUtil {
	/**
	 * Creates an image with the specified width and height and paints it on a canvas.
	 * Since the size of the canvas can differ from the size of the image, the position of the image within the canvas
	 * must be specified via `posX` and `posY`, with `posX` specifying the X coordinate
	 * and `posY` specifying the Y coordinate of the upper left corner of the image. <br></br><br></br>
	 *
	 * **Warning:** Make sure that the image resides within the canvas, otherwise the image may be partly or
	 * completely hidden. <br></br><br></br>
	 *
	 * The class passed to this method **must** have been created using
	 * [SVG2Java](https://code.google.com/p/svg2java/).
	 *
	 * @param clazz class generated by SVG2Java
	 * @param imageWidth image width
	 * @param imageHeight image height
	 * @param canvasWidth canvas width (must be &gt; 0)
	 * @param canvasHeight canvas height (must be &gt; 0)
	 * @param posX X coordinate of the upper left corner of the image
	 * @param posY Y coordinate of the upper left corner of the image
	 * @return java.awt.Image
	 */
	@JvmStatic
	@JvmOverloads
	fun createImage(
		clazz: Class<out Icon>,
		imageWidth: Int,
		imageHeight: Int,
		canvasWidth: Int = imageWidth,
		canvasHeight: Int = imageHeight,
		posX: Int = 0,
		posY: Int = 0,
	): Image {
		val image = BufferedImage(canvasWidth, canvasHeight, BufferedImage.TYPE_INT_ARGB)

		// The methods used in the following try-catch-block throw a lot of different exceptions, which should be
		// handled separately. If an exception is thrown, regardless of its specific type, the result is always the
		// same: the image doesn't get painted onto the canvas. Hence catching Exception is acceptable.
		try {
			val svgIcon: Icon = clazz.getDeclaredConstructor().newInstance()

			var method = clazz.getMethod("setDimension", Dimension::class.java)
			method.invoke(svgIcon, Dimension(imageWidth, imageHeight))

			method =
				clazz.getMethod(
					"paintIcon",
					Component::class.java,
					Graphics::class.java,
					Int::class.javaPrimitiveType,
					Int::class.javaPrimitiveType,
				)
			method.invoke(svgIcon, null, image.createGraphics(), posX, posY)
		} catch (ex: Exception) {
			LOG.error(ex) { "${ex.message}" }
		}

		return image
	}
}
