package org.openecard.mdlw.sal.cryptoki;
import com.sun.jna.Pointer;
import com.sun.jna.Structure;
import java.util.Arrays;
import java.util.List;
/**
 * <i>native declaration : pkcs11_v2.40/pkcs11t.h</i><br>
 * This file was autogenerated by <a href="http://jnaerator.googlecode.com/">JNAerator</a>,<br>
 * a tool written by <a href="http://ochafik.com/">Olivier Chafik</a> that <a href="http://code.google.com/p/jnaerator/wiki/CreditsAndLicense">uses a few opensource projects.</a>.<br>
 * For help, please visit <a href="http://nativelibs4java.googlecode.com/">NativeLibs4Java</a> , <a href="http://rococoa.dev.java.net/">Rococoa</a>, or <a href="http://jna.dev.java.net/">JNA</a>.
 */
public class CK_KEA_DERIVE_PARAMS extends Structure {
	/** C type : CK_BBOOL */
	public byte isSender;
	public byte getIsSender() {
		return isSender;
	}
	public void setIsSender(byte isSender) {
		this.isSender = isSender;
	}
	/** C type : CK_ULONG */
	public long ulRandomLen;
	public long getUlRandomLen() {
		return ulRandomLen;
	}
	public void setUlRandomLen(long ulRandomLen) {
		this.ulRandomLen = ulRandomLen;
	}
	/** C type : CK_BYTE_PTR */
	public Pointer pRandomA;
	public Pointer getPRandomA() {
		return pRandomA;
	}
	public void setPRandomA(Pointer pRandomA) {
		this.pRandomA = pRandomA;
	}
	/** C type : CK_BYTE_PTR */
	public Pointer pRandomB;
	public Pointer getPRandomB() {
		return pRandomB;
	}
	public void setPRandomB(Pointer pRandomB) {
		this.pRandomB = pRandomB;
	}
	/** C type : CK_ULONG */
	public long ulPublicDataLen;
	public long getUlPublicDataLen() {
		return ulPublicDataLen;
	}
	public void setUlPublicDataLen(long ulPublicDataLen) {
		this.ulPublicDataLen = ulPublicDataLen;
	}
	/** C type : CK_BYTE_PTR */
	public Pointer pPublicData;
	public Pointer getPPublicData() {
		return pPublicData;
	}
	public void setPPublicData(Pointer pPublicData) {
		this.pPublicData = pPublicData;
	}
	public CK_KEA_DERIVE_PARAMS() {
		super();
	}
	 protected List<String> getFieldOrder() {
		return Arrays.asList("isSender", "ulRandomLen", "pRandomA", "pRandomB", "ulPublicDataLen", "pPublicData");
	}
	/**
	 * @param isSender C type : CK_BBOOL<br>
	 * @param ulRandomLen C type : CK_ULONG<br>
	 * @param pRandomA C type : CK_BYTE_PTR<br>
	 * @param pRandomB C type : CK_BYTE_PTR<br>
	 * @param ulPublicDataLen C type : CK_ULONG<br>
	 * @param pPublicData C type : CK_BYTE_PTR
	 */
	public CK_KEA_DERIVE_PARAMS(byte isSender, long ulRandomLen, Pointer pRandomA, Pointer pRandomB, long ulPublicDataLen, Pointer pPublicData) {
		super();
		this.isSender = isSender;
		this.ulRandomLen = ulRandomLen;
		this.pRandomA = pRandomA;
		this.pRandomB = pRandomB;
		this.ulPublicDataLen = ulPublicDataLen;
		this.pPublicData = pPublicData;
	}
	public CK_KEA_DERIVE_PARAMS(Pointer peer) {
		super(peer);
	}
	public static class ByReference extends CK_KEA_DERIVE_PARAMS implements Structure.ByReference {
		
	};
	public static class ByValue extends CK_KEA_DERIVE_PARAMS implements Structure.ByValue {
		
	};
}
