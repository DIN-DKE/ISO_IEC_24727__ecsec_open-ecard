package org.openecard.mdlw.sal.cryptoki;
import com.sun.jna.Pointer;
import com.sun.jna.Structure;
import java.util.Arrays;
import java.util.List;
/**
 * <i>native declaration : pkcs11_v2.40/pkcs11t.h</i><br>
 * This file was autogenerated by <a href="http://jnaerator.googlecode.com/">JNAerator</a>,<br>
 * a tool written by <a href="http://ochafik.com/">Olivier Chafik</a> that <a href="http://code.google.com/p/jnaerator/wiki/CreditsAndLicense">uses a few opensource projects.</a>.<br>
 * For help, please visit <a href="http://nativelibs4java.googlecode.com/">NativeLibs4Java</a> , <a href="http://rococoa.dev.java.net/">Rococoa</a>, or <a href="http://jna.dev.java.net/">JNA</a>.
 */
public class CK_AES_CTR_PARAMS extends Structure {
	/** C type : CK_ULONG */
	public long ulCounterBits;
	public long getUlCounterBits() {
		return ulCounterBits;
	}
	public void setUlCounterBits(long ulCounterBits) {
		this.ulCounterBits = ulCounterBits;
	}
	/** C type : CK_BYTE[16] */
	public byte[] cb = new byte[16];
	public byte[] getCb() {
		return cb;
	}
	public void setCb(byte cb[]) {
		this.cb = cb;
	}
	public CK_AES_CTR_PARAMS() {
		super();
	}
	protected List<String> getFieldOrder() {
		return Arrays.asList("ulCounterBits", "cb");
	}
	/**
	 * @param ulCounterBits C type : CK_ULONG<br>
	 * @param cb C type : CK_BYTE[16]
	 */
	public CK_AES_CTR_PARAMS(long ulCounterBits, byte cb[]) {
		super();
		this.ulCounterBits = ulCounterBits;
		if ((cb.length != this.cb.length)) 
			throw new IllegalArgumentException("Wrong array size !");
		this.cb = cb;
	}
	public CK_AES_CTR_PARAMS(Pointer peer) {
		super(peer);
	}
	public static class ByReference extends CK_AES_CTR_PARAMS implements Structure.ByReference {
		
	};
	public static class ByValue extends CK_AES_CTR_PARAMS implements Structure.ByValue {
		
	};
}
