package org.openecard.mdlw.sal.cryptoki;
import com.sun.jna.Pointer;
import com.sun.jna.Structure;
import java.util.Arrays;
import java.util.List;
/**
 * <i>native declaration : pkcs11_v2.40/pkcs11t.h</i><br>
 * This file was autogenerated by <a href="http://jnaerator.googlecode.com/">JNAerator</a>,<br>
 * a tool written by <a href="http://ochafik.com/">Olivier Chafik</a> that <a href="http://code.google.com/p/jnaerator/wiki/CreditsAndLicense">uses a few opensource projects.</a>.<br>
 * For help, please visit <a href="http://nativelibs4java.googlecode.com/">NativeLibs4Java</a> , <a href="http://rococoa.dev.java.net/">Rococoa</a>, or <a href="http://jna.dev.java.net/">JNA</a>.
 */
public class CK_PBE_PARAMS extends Structure {
	/** C type : CK_BYTE_PTR */
	public Pointer pInitVector;
	public Pointer getPInitVector() {
		return pInitVector;
	}
	public void setPInitVector(Pointer pInitVector) {
		this.pInitVector = pInitVector;
	}
	/** C type : CK_UTF8CHAR_PTR */
	public Pointer pPassword;
	public Pointer getPPassword() {
		return pPassword;
	}
	public void setPPassword(Pointer pPassword) {
		this.pPassword = pPassword;
	}
	/** C type : CK_ULONG */
	public long ulPasswordLen;
	public long getUlPasswordLen() {
		return ulPasswordLen;
	}
	public void setUlPasswordLen(long ulPasswordLen) {
		this.ulPasswordLen = ulPasswordLen;
	}
	/** C type : CK_BYTE_PTR */
	public Pointer pSalt;
	public Pointer getPSalt() {
		return pSalt;
	}
	public void setPSalt(Pointer pSalt) {
		this.pSalt = pSalt;
	}
	/** C type : CK_ULONG */
	public long ulSaltLen;
	public long getUlSaltLen() {
		return ulSaltLen;
	}
	public void setUlSaltLen(long ulSaltLen) {
		this.ulSaltLen = ulSaltLen;
	}
	/** C type : CK_ULONG */
	public long ulIteration;
	public long getUlIteration() {
		return ulIteration;
	}
	public void setUlIteration(long ulIteration) {
		this.ulIteration = ulIteration;
	}
	public CK_PBE_PARAMS() {
		super();
	}
	 protected List<String> getFieldOrder() {
		return Arrays.asList("pInitVector", "pPassword", "ulPasswordLen", "pSalt", "ulSaltLen", "ulIteration");
	}
	/**
	 * @param pInitVector C type : CK_BYTE_PTR<br>
	 * @param pPassword C type : CK_UTF8CHAR_PTR<br>
	 * @param ulPasswordLen C type : CK_ULONG<br>
	 * @param pSalt C type : CK_BYTE_PTR<br>
	 * @param ulSaltLen C type : CK_ULONG<br>
	 * @param ulIteration C type : CK_ULONG
	 */
	public CK_PBE_PARAMS(Pointer pInitVector, Pointer pPassword, long ulPasswordLen, Pointer pSalt, long ulSaltLen, long ulIteration) {
		super();
		this.pInitVector = pInitVector;
		this.pPassword = pPassword;
		this.ulPasswordLen = ulPasswordLen;
		this.pSalt = pSalt;
		this.ulSaltLen = ulSaltLen;
		this.ulIteration = ulIteration;
	}
	public CK_PBE_PARAMS(Pointer peer) {
		super(peer);
	}
	public static class ByReference extends CK_PBE_PARAMS implements Structure.ByReference {
		
	};
	public static class ByValue extends CK_PBE_PARAMS implements Structure.ByValue {
		
	};
}
