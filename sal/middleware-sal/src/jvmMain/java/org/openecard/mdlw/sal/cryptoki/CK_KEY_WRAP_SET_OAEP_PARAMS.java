package org.openecard.mdlw.sal.cryptoki;
import com.sun.jna.Pointer;
import com.sun.jna.Structure;
import java.util.Arrays;
import java.util.List;
/**
 * <i>native declaration : pkcs11_v2.40/pkcs11t.h</i><br>
 * This file was autogenerated by <a href="http://jnaerator.googlecode.com/">JNAerator</a>,<br>
 * a tool written by <a href="http://ochafik.com/">Olivier Chafik</a> that <a href="http://code.google.com/p/jnaerator/wiki/CreditsAndLicense">uses a few opensource projects.</a>.<br>
 * For help, please visit <a href="http://nativelibs4java.googlecode.com/">NativeLibs4Java</a> , <a href="http://rococoa.dev.java.net/">Rococoa</a>, or <a href="http://jna.dev.java.net/">JNA</a>.
 */
public class CK_KEY_WRAP_SET_OAEP_PARAMS extends Structure {
	/**
	 * block contents byte<br>
	 * C type : CK_BYTE
	 */
	public byte bBC;
	public byte getBBC() {
		return bBC;
	}
	public void setBBC(byte bBC) {
		this.bBC = bBC;
	}
	/**
	 * extra data<br>
	 * C type : CK_BYTE_PTR
	 */
	public Pointer pX;
	public Pointer getPX() {
		return pX;
	}
	public void setPX(Pointer pX) {
		this.pX = pX;
	}
	/**
	 * length of extra data in bytes<br>
	 * C type : CK_ULONG
	 */
	public long ulXLen;
	public long getUlXLen() {
		return ulXLen;
	}
	public void setUlXLen(long ulXLen) {
		this.ulXLen = ulXLen;
	}
	public CK_KEY_WRAP_SET_OAEP_PARAMS() {
		super();
	}
	 protected List<String> getFieldOrder() {
		return Arrays.asList("bBC", "pX", "ulXLen");
	}
	/**
	 * @param bBC block contents byte<br>
	 * C type : CK_BYTE<br>
	 * @param pX extra data<br>
	 * C type : CK_BYTE_PTR<br>
	 * @param ulXLen length of extra data in bytes<br>
	 * C type : CK_ULONG
	 */
	public CK_KEY_WRAP_SET_OAEP_PARAMS(byte bBC, Pointer pX, long ulXLen) {
		super();
		this.bBC = bBC;
		this.pX = pX;
		this.ulXLen = ulXLen;
	}
	public CK_KEY_WRAP_SET_OAEP_PARAMS(Pointer peer) {
		super(peer);
	}
	public static class ByReference extends CK_KEY_WRAP_SET_OAEP_PARAMS implements Structure.ByReference {
		
	};
	public static class ByValue extends CK_KEY_WRAP_SET_OAEP_PARAMS implements Structure.ByValue {
		
	};
}
