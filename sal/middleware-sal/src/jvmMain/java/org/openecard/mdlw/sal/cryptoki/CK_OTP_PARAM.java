package org.openecard.mdlw.sal.cryptoki;
import com.sun.jna.Pointer;
import com.sun.jna.Structure;
import java.util.Arrays;
import java.util.List;
/**
 * <i>native declaration : pkcs11_v2.40/pkcs11t.h</i><br>
 * This file was autogenerated by <a href="http://jnaerator.googlecode.com/">JNAerator</a>,<br>
 * a tool written by <a href="http://ochafik.com/">Olivier Chafik</a> that <a href="http://code.google.com/p/jnaerator/wiki/CreditsAndLicense">uses a few opensource projects.</a>.<br>
 * For help, please visit <a href="http://nativelibs4java.googlecode.com/">NativeLibs4Java</a> , <a href="http://rococoa.dev.java.net/">Rococoa</a>, or <a href="http://jna.dev.java.net/">JNA</a>.
 */
public class CK_OTP_PARAM extends Structure {
	/** C type : CK_OTP_PARAM_TYPE */
	public long type;
	public long getType() {
		return type;
	}
	public void setType(long type) {
		this.type = type;
	}
	/** C type : CK_VOID_PTR */
	public Pointer pValue;
	public Pointer getPValue() {
		return pValue;
	}
	public void setPValue(Pointer pValue) {
		this.pValue = pValue;
	}
	/** C type : CK_ULONG */
	public long ulValueLen;
	public long getUlValueLen() {
		return ulValueLen;
	}
	public void setUlValueLen(long ulValueLen) {
		this.ulValueLen = ulValueLen;
	}
	public CK_OTP_PARAM() {
		super();
	}
	 protected List<String> getFieldOrder() {
		return Arrays.asList("type", "pValue", "ulValueLen");
	}
	/**
	 * @param type C type : CK_OTP_PARAM_TYPE<br>
	 * @param pValue C type : CK_VOID_PTR<br>
	 * @param ulValueLen C type : CK_ULONG
	 */
	public CK_OTP_PARAM(long type, Pointer pValue, long ulValueLen) {
		super();
		this.type = type;
		this.pValue = pValue;
		this.ulValueLen = ulValueLen;
	}
	public CK_OTP_PARAM(Pointer peer) {
		super(peer);
	}
	public static class ByReference extends CK_OTP_PARAM implements Structure.ByReference {
		
	};
	public static class ByValue extends CK_OTP_PARAM implements Structure.ByValue {
		
	};
}
