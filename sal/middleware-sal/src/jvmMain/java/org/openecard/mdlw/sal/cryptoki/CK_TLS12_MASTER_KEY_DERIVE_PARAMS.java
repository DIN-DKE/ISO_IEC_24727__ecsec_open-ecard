package org.openecard.mdlw.sal.cryptoki;
import com.sun.jna.Pointer;
import com.sun.jna.Structure;
import java.util.Arrays;
import java.util.List;
/**
 * <i>native declaration : pkcs11_v2.40/pkcs11t.h</i><br>
 * This file was autogenerated by <a href="http://jnaerator.googlecode.com/">JNAerator</a>,<br>
 * a tool written by <a href="http://ochafik.com/">Olivier Chafik</a> that <a href="http://code.google.com/p/jnaerator/wiki/CreditsAndLicense">uses a few opensource projects.</a>.<br>
 * For help, please visit <a href="http://nativelibs4java.googlecode.com/">NativeLibs4Java</a> , <a href="http://rococoa.dev.java.net/">Rococoa</a>, or <a href="http://jna.dev.java.net/">JNA</a>.
 */
public class CK_TLS12_MASTER_KEY_DERIVE_PARAMS extends Structure {
	/** C type : CK_SSL3_RANDOM_DATA */
	public CK_SSL3_RANDOM_DATA RandomInfo;
	public CK_SSL3_RANDOM_DATA getRandomInfo() {
		return RandomInfo;
	}
	public void setRandomInfo(CK_SSL3_RANDOM_DATA RandomInfo) {
		this.RandomInfo = RandomInfo;
	}
	/** C type : CK_VERSION_PTR */
	public org.openecard.mdlw.sal.cryptoki.CK_VERSION.ByReference pVersion;
	public org.openecard.mdlw.sal.cryptoki.CK_VERSION.ByReference getPVersion() {
		return pVersion;
	}
	public void setPVersion(org.openecard.mdlw.sal.cryptoki.CK_VERSION.ByReference pVersion) {
		this.pVersion = pVersion;
	}
	/** C type : CK_MECHANISM_TYPE */
	public long prfHashMechanism;
	public long getPrfHashMechanism() {
		return prfHashMechanism;
	}
	public void setPrfHashMechanism(long prfHashMechanism) {
		this.prfHashMechanism = prfHashMechanism;
	}
	public CK_TLS12_MASTER_KEY_DERIVE_PARAMS() {
		super();
	}
	 protected List<String> getFieldOrder() {
		return Arrays.asList("RandomInfo", "pVersion", "prfHashMechanism");
	}
	/**
	 * @param RandomInfo C type : CK_SSL3_RANDOM_DATA<br>
	 * @param pVersion C type : CK_VERSION_PTR<br>
	 * @param prfHashMechanism C type : CK_MECHANISM_TYPE
	 */
	public CK_TLS12_MASTER_KEY_DERIVE_PARAMS(CK_SSL3_RANDOM_DATA RandomInfo, org.openecard.mdlw.sal.cryptoki.CK_VERSION.ByReference pVersion, long prfHashMechanism) {
		super();
		this.RandomInfo = RandomInfo;
		this.pVersion = pVersion;
		this.prfHashMechanism = prfHashMechanism;
	}
	public CK_TLS12_MASTER_KEY_DERIVE_PARAMS(Pointer peer) {
		super(peer);
	}
	public static class ByReference extends CK_TLS12_MASTER_KEY_DERIVE_PARAMS implements Structure.ByReference {
		
	};
	public static class ByValue extends CK_TLS12_MASTER_KEY_DERIVE_PARAMS implements Structure.ByValue {
		
	};
}
