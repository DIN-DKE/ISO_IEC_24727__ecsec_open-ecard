package org.openecard.mdlw.sal.cryptoki;
import com.sun.jna.Pointer;
import com.sun.jna.Structure;
import java.util.Arrays;
import java.util.List;
/**
 * <i>native declaration : pkcs11_v2.40/pkcs11t.h</i><br>
 * This file was autogenerated by <a href="http://jnaerator.googlecode.com/">JNAerator</a>,<br>
 * a tool written by <a href="http://ochafik.com/">Olivier Chafik</a> that <a href="http://code.google.com/p/jnaerator/wiki/CreditsAndLicense">uses a few opensource projects.</a>.<br>
 * For help, please visit <a href="http://nativelibs4java.googlecode.com/">NativeLibs4Java</a> , <a href="http://rococoa.dev.java.net/">Rococoa</a>, or <a href="http://jna.dev.java.net/">JNA</a>.
 */
public class CK_TLS12_KEY_MAT_PARAMS extends Structure {
	/** C type : CK_ULONG */
	public long ulMacSizeInBits;
	public long getUlMacSizeInBits() {
		return ulMacSizeInBits;
	}
	public void setUlMacSizeInBits(long ulMacSizeInBits) {
		this.ulMacSizeInBits = ulMacSizeInBits;
	}
	/** C type : CK_ULONG */
	public long ulKeySizeInBits;
	public long getUlKeySizeInBits() {
		return ulKeySizeInBits;
	}
	public void setUlKeySizeInBits(long ulKeySizeInBits) {
		this.ulKeySizeInBits = ulKeySizeInBits;
	}
	/** C type : CK_ULONG */
	public long ulIVSizeInBits;
	public long getUlIVSizeInBits() {
		return ulIVSizeInBits;
	}
	public void setUlIVSizeInBits(long ulIVSizeInBits) {
		this.ulIVSizeInBits = ulIVSizeInBits;
	}
	/** C type : CK_BBOOL */
	public byte bIsExport;
	public byte getBIsExport() {
		return bIsExport;
	}
	public void setBIsExport(byte bIsExport) {
		this.bIsExport = bIsExport;
	}
	/** C type : CK_SSL3_RANDOM_DATA */
	public CK_SSL3_RANDOM_DATA RandomInfo;
	public CK_SSL3_RANDOM_DATA getRandomInfo() {
		return RandomInfo;
	}
	public void setRandomInfo(CK_SSL3_RANDOM_DATA RandomInfo) {
		this.RandomInfo = RandomInfo;
	}
	/** C type : CK_SSL3_KEY_MAT_OUT_PTR */
	public org.openecard.mdlw.sal.cryptoki.CK_SSL3_KEY_MAT_OUT.ByReference pReturnedKeyMaterial;
	public org.openecard.mdlw.sal.cryptoki.CK_SSL3_KEY_MAT_OUT.ByReference getPReturnedKeyMaterial() {
		return pReturnedKeyMaterial;
	}
	public void setPReturnedKeyMaterial(org.openecard.mdlw.sal.cryptoki.CK_SSL3_KEY_MAT_OUT.ByReference pReturnedKeyMaterial) {
		this.pReturnedKeyMaterial = pReturnedKeyMaterial;
	}
	/** C type : CK_MECHANISM_TYPE */
	public long prfHashMechanism;
	public long getPrfHashMechanism() {
		return prfHashMechanism;
	}
	public void setPrfHashMechanism(long prfHashMechanism) {
		this.prfHashMechanism = prfHashMechanism;
	}
	public CK_TLS12_KEY_MAT_PARAMS() {
		super();
	}
	 protected List<String> getFieldOrder() {
		return Arrays.asList("ulMacSizeInBits", "ulKeySizeInBits", "ulIVSizeInBits", "bIsExport", "RandomInfo", "pReturnedKeyMaterial", "prfHashMechanism");
	}
	/**
	 * @param ulMacSizeInBits C type : CK_ULONG<br>
	 * @param ulKeySizeInBits C type : CK_ULONG<br>
	 * @param ulIVSizeInBits C type : CK_ULONG<br>
	 * @param bIsExport C type : CK_BBOOL<br>
	 * @param RandomInfo C type : CK_SSL3_RANDOM_DATA<br>
	 * @param pReturnedKeyMaterial C type : CK_SSL3_KEY_MAT_OUT_PTR<br>
	 * @param prfHashMechanism C type : CK_MECHANISM_TYPE
	 */
	public CK_TLS12_KEY_MAT_PARAMS(long ulMacSizeInBits, long ulKeySizeInBits, long ulIVSizeInBits, byte bIsExport, CK_SSL3_RANDOM_DATA RandomInfo, org.openecard.mdlw.sal.cryptoki.CK_SSL3_KEY_MAT_OUT.ByReference pReturnedKeyMaterial, long prfHashMechanism) {
		super();
		this.ulMacSizeInBits = ulMacSizeInBits;
		this.ulKeySizeInBits = ulKeySizeInBits;
		this.ulIVSizeInBits = ulIVSizeInBits;
		this.bIsExport = bIsExport;
		this.RandomInfo = RandomInfo;
		this.pReturnedKeyMaterial = pReturnedKeyMaterial;
		this.prfHashMechanism = prfHashMechanism;
	}
	public CK_TLS12_KEY_MAT_PARAMS(Pointer peer) {
		super(peer);
	}
	public static class ByReference extends CK_TLS12_KEY_MAT_PARAMS implements Structure.ByReference {
		
	};
	public static class ByValue extends CK_TLS12_KEY_MAT_PARAMS implements Structure.ByValue {
		
	};
}
