package org.openecard.mdlw.sal.cryptoki;

import com.sun.jna.Callback;
import com.sun.jna.FromNativeContext;
import com.sun.jna.Library;
import com.sun.jna.Memory;
import com.sun.jna.NativeLong;
import com.sun.jna.Pointer;
import com.sun.jna.PointerType;
import com.sun.jna.Structure;
import com.sun.jna.ptr.NativeLongByReference;
import com.sun.jna.ptr.PointerByReference;
import java.nio.ByteBuffer;
import java.nio.LongBuffer;


/**
 * JNA Wrapper for library <b>cryptoki</b><br>
 * This file was autogenerated by
 * <a href="http://jnaerator.googlecode.com/">JNAerator</a>,<br>
 * a tool written by <a href="http://ochafik.com/">Olivier Chafik</a> that
 * <a href="http://code.google.com/p/jnaerator/wiki/CreditsAndLicense">uses a
 * few opensource projects.</a>.<br>
 * For help, please visit
 * <a href="http://nativelibs4java.googlecode.com/">NativeLibs4Java</a> ,
 * <a href="http://rococoa.dev.java.net/">Rococoa</a>, or
 * <a href="http://jna.dev.java.net/">JNA</a>.
 */
public interface CryptokiLibrary extends Library {

    int STRUCTURE_ALIGNMENT = Structure.ALIGN_NONE;

    // public static final String JNA_LIBRARY_NAME = "cryptoki";
    // public static final NativeLibrary JNA_NATIVE_LIB =
    // NativeLibrary.getInstance(CryptokiLibrary.JNA_LIBRARY_NAME);
    // public static final CryptokiLibrary INSTANCE =
    // (CryptokiLibrary)Native.loadLibrary(CryptokiLibrary.JNA_LIBRARY_NAME,
    // CryptokiLibrary.class);
    /**
     * define<br>
     * Conversion Error : null<br>
     * SKIPPED:<br>
     * <i>native declaration : pkcs11_v2.40/cryptoki.h</i><br>
     * *
     */
    /** <i>native declaration : pkcs11_v2.40/cryptoki.h</i> */
    public static final int NULL_PTR = (int) 0;
    /** <i>native declaration : pkcs11_v2.40/pkcs11.h</i> */
    public static final int _PKCS11_H_ = (int) 1;
    /** <i>native declaration : pkcs11_v2.40/pkcs11t.h</i> */
    public static final int _PKCS11T_H_ = (int) 1;
    /** <i>native declaration : pkcs11_v2.40/pkcs11t.h</i> */
    public static final int CRYPTOKI_VERSION_MAJOR = (int) 2;
    /** <i>native declaration : pkcs11_v2.40/pkcs11t.h</i> */
    public static final int CRYPTOKI_VERSION_MINOR = (int) 40;
    /** <i>native declaration : pkcs11_v2.40/pkcs11t.h</i> */
    public static final int CRYPTOKI_VERSION_AMENDMENT = (int) 0;
    /** <i>native declaration : pkcs11_v2.40/pkcs11t.h</i> */
    public static final int CK_TRUE = (int) 1;
    /** <i>native declaration : pkcs11_v2.40/pkcs11t.h</i> */
    public static final int CK_FALSE = (int) 0;
    /** <i>native declaration : pkcs11_v2.40/pkcs11t.h</i> */
    public static final int FALSE = (int) 0;
    /** <i>native declaration : pkcs11_v2.40/pkcs11t.h</i> */
    public static final int TRUE = (int) 1;
    /** <i>native declaration : pkcs11_v2.40/pkcs11t.h</i> */
    public static final long CK_UNAVAILABLE_INFORMATION = (~0);
    /** <i>native declaration : pkcs11_v2.40/pkcs11t.h</i> */
    public static final int CK_EFFECTIVELY_INFINITE = (int) 0;
    /** <i>native declaration : pkcs11_v2.40/pkcs11t.h</i> */
    public static final int CK_INVALID_HANDLE = (int) 0;
    /** <i>native declaration : pkcs11_v2.40/pkcs11t.h</i> */
    public static final int CKN_SURRENDER = (int) 0;
    /** <i>native declaration : pkcs11_v2.40/pkcs11t.h</i> */
    public static final int CKN_OTP_CHANGED = (int) 1;
    /** <i>native declaration : pkcs11_v2.40/pkcs11t.h</i> */
    public static final int CKF_TOKEN_PRESENT = (int) 0x00000001;
    /** <i>native declaration : pkcs11_v2.40/pkcs11t.h</i> */
    public static final int CKF_REMOVABLE_DEVICE = (int) 0x00000002;
    /** <i>native declaration : pkcs11_v2.40/pkcs11t.h</i> */
    public static final int CKF_HW_SLOT = (int) 0x00000004;
    /** <i>native declaration : pkcs11_v2.40/pkcs11t.h</i> */
    public static final int CKF_RNG = (int) 0x00000001;
    /** <i>native declaration : pkcs11_v2.40/pkcs11t.h</i> */
    public static final int CKF_WRITE_PROTECTED = (int) 0x00000002;
    /** <i>native declaration : pkcs11_v2.40/pkcs11t.h</i> */
    public static final int CKF_LOGIN_REQUIRED = (int) 0x00000004;
    /** <i>native declaration : pkcs11_v2.40/pkcs11t.h</i> */
    public static final int CKF_USER_PIN_INITIALIZED = (int) 0x00000008;
    /** <i>native declaration : pkcs11_v2.40/pkcs11t.h</i> */
    public static final int CKF_RESTORE_KEY_NOT_NEEDED = (int) 0x00000020;
    /** <i>native declaration : pkcs11_v2.40/pkcs11t.h</i> */
    public static final int CKF_CLOCK_ON_TOKEN = (int) 0x00000040;
    /** <i>native declaration : pkcs11_v2.40/pkcs11t.h</i> */
    public static final int CKF_PROTECTED_AUTHENTICATION_PATH = (int) 0x00000100;
    /** <i>native declaration : pkcs11_v2.40/pkcs11t.h</i> */
    public static final int CKF_DUAL_CRYPTO_OPERATIONS = (int) 0x00000200;
    /** <i>native declaration : pkcs11_v2.40/pkcs11t.h</i> */
    public static final int CKF_TOKEN_INITIALIZED = (int) 0x00000400;
    /** <i>native declaration : pkcs11_v2.40/pkcs11t.h</i> */
    public static final int CKF_SECONDARY_AUTHENTICATION = (int) 0x00000800;
    /** <i>native declaration : pkcs11_v2.40/pkcs11t.h</i> */
    public static final int CKF_USER_PIN_COUNT_LOW = (int) 0x00010000;
    /** <i>native declaration : pkcs11_v2.40/pkcs11t.h</i> */
    public static final int CKF_USER_PIN_FINAL_TRY = (int) 0x00020000;
    /** <i>native declaration : pkcs11_v2.40/pkcs11t.h</i> */
    public static final int CKF_USER_PIN_LOCKED = (int) 0x00040000;
    /** <i>native declaration : pkcs11_v2.40/pkcs11t.h</i> */
    public static final int CKF_USER_PIN_TO_BE_CHANGED = (int) 0x00080000;
    /** <i>native declaration : pkcs11_v2.40/pkcs11t.h</i> */
    public static final int CKF_SO_PIN_COUNT_LOW = (int) 0x00100000;
    /** <i>native declaration : pkcs11_v2.40/pkcs11t.h</i> */
    public static final int CKF_SO_PIN_FINAL_TRY = (int) 0x00200000;
    /** <i>native declaration : pkcs11_v2.40/pkcs11t.h</i> */
    public static final int CKF_SO_PIN_LOCKED = (int) 0x00400000;
    /** <i>native declaration : pkcs11_v2.40/pkcs11t.h</i> */
    public static final int CKF_SO_PIN_TO_BE_CHANGED = (int) 0x00800000;
    /** <i>native declaration : pkcs11_v2.40/pkcs11t.h</i> */
    public static final int CKF_ERROR_STATE = (int) 0x01000000;
    /** <i>native declaration : pkcs11_v2.40/pkcs11t.h</i> */
    public static final int CKU_SO = (int) 0;
    /** <i>native declaration : pkcs11_v2.40/pkcs11t.h</i> */
    public static final int CKU_USER = (int) 1;
    /** <i>native declaration : pkcs11_v2.40/pkcs11t.h</i> */
    public static final int CKU_CONTEXT_SPECIFIC = (int) 2;
    /** <i>native declaration : pkcs11_v2.40/pkcs11t.h</i> */
    public static final int CKS_RO_PUBLIC_SESSION = (int) 0;
    /** <i>native declaration : pkcs11_v2.40/pkcs11t.h</i> */
    public static final int CKS_RO_USER_FUNCTIONS = (int) 1;
    /** <i>native declaration : pkcs11_v2.40/pkcs11t.h</i> */
    public static final int CKS_RW_PUBLIC_SESSION = (int) 2;
    /** <i>native declaration : pkcs11_v2.40/pkcs11t.h</i> */
    public static final int CKS_RW_USER_FUNCTIONS = (int) 3;
    /** <i>native declaration : pkcs11_v2.40/pkcs11t.h</i> */
    public static final int CKS_RW_SO_FUNCTIONS = (int) 4;
    /** <i>native declaration : pkcs11_v2.40/pkcs11t.h</i> */
    public static final int CKF_RW_SESSION = (int) 0x00000002;
    /** <i>native declaration : pkcs11_v2.40/pkcs11t.h</i> */
    public static final int CKF_SERIAL_SESSION = (int) 0x00000004;
    /** <i>native declaration : pkcs11_v2.40/pkcs11t.h</i> */
    public static final int CKO_DATA = (int) 0x00000000;
    /** <i>native declaration : pkcs11_v2.40/pkcs11t.h</i> */
    public static final int CKO_CERTIFICATE = (int) 0x00000001;
    /** <i>native declaration : pkcs11_v2.40/pkcs11t.h</i> */
    public static final int CKO_PUBLIC_KEY = (int) 0x00000002;
    /** <i>native declaration : pkcs11_v2.40/pkcs11t.h</i> */
    public static final int CKO_PRIVATE_KEY = (int) 0x00000003;
    /** <i>native declaration : pkcs11_v2.40/pkcs11t.h</i> */
    public static final int CKO_SECRET_KEY = (int) 0x00000004;
    /** <i>native declaration : pkcs11_v2.40/pkcs11t.h</i> */
    public static final int CKO_HW_FEATURE = (int) 0x00000005;
    /** <i>native declaration : pkcs11_v2.40/pkcs11t.h</i> */
    public static final int CKO_DOMAIN_PARAMETERS = (int) 0x00000006;
    /** <i>native declaration : pkcs11_v2.40/pkcs11t.h</i> */
    public static final int CKO_MECHANISM = (int) 0x00000007;
    /** <i>native declaration : pkcs11_v2.40/pkcs11t.h</i> */
    public static final int CKO_OTP_KEY = (int) 0x00000008;
    /** <i>native declaration : pkcs11_v2.40/pkcs11t.h</i> */
    public static final int CKO_VENDOR_DEFINED = (int) 0x80000000;
    /** <i>native declaration : pkcs11_v2.40/pkcs11t.h</i> */
    public static final int CKH_MONOTONIC_COUNTER = (int) 0x00000001;
    /** <i>native declaration : pkcs11_v2.40/pkcs11t.h</i> */
    public static final int CKH_CLOCK = (int) 0x00000002;
    /** <i>native declaration : pkcs11_v2.40/pkcs11t.h</i> */
    public static final int CKH_USER_INTERFACE = (int) 0x00000003;
    /** <i>native declaration : pkcs11_v2.40/pkcs11t.h</i> */
    public static final int CKH_VENDOR_DEFINED = (int) 0x80000000;
    /** <i>native declaration : pkcs11_v2.40/pkcs11t.h</i> */
    public static final int CKK_RSA = (int) 0x00000000;
    /** <i>native declaration : pkcs11_v2.40/pkcs11t.h</i> */
    public static final int CKK_DSA = (int) 0x00000001;
    /** <i>native declaration : pkcs11_v2.40/pkcs11t.h</i> */
    public static final int CKK_DH = (int) 0x00000002;
    /** <i>native declaration : pkcs11_v2.40/pkcs11t.h</i> */
    public static final int CKK_ECDSA = (int) 0x00000003;
    /** <i>native declaration : pkcs11_v2.40/pkcs11t.h</i> */
    public static final int CKK_EC = (int) 0x00000003;
    /** <i>native declaration : pkcs11_v2.40/pkcs11t.h</i> */
    public static final int CKK_X9_42_DH = (int) 0x00000004;
    /** <i>native declaration : pkcs11_v2.40/pkcs11t.h</i> */
    public static final int CKK_KEA = (int) 0x00000005;
    /** <i>native declaration : pkcs11_v2.40/pkcs11t.h</i> */
    public static final int CKK_GENERIC_SECRET = (int) 0x00000010;
    /** <i>native declaration : pkcs11_v2.40/pkcs11t.h</i> */
    public static final int CKK_RC2 = (int) 0x00000011;
    /** <i>native declaration : pkcs11_v2.40/pkcs11t.h</i> */
    public static final int CKK_RC4 = (int) 0x00000012;
    /** <i>native declaration : pkcs11_v2.40/pkcs11t.h</i> */
    public static final int CKK_DES = (int) 0x00000013;
    /** <i>native declaration : pkcs11_v2.40/pkcs11t.h</i> */
    public static final int CKK_DES2 = (int) 0x00000014;
    /** <i>native declaration : pkcs11_v2.40/pkcs11t.h</i> */
    public static final int CKK_DES3 = (int) 0x00000015;
    /** <i>native declaration : pkcs11_v2.40/pkcs11t.h</i> */
    public static final int CKK_CAST = (int) 0x00000016;
    /** <i>native declaration : pkcs11_v2.40/pkcs11t.h</i> */
    public static final int CKK_CAST3 = (int) 0x00000017;
    /** <i>native declaration : pkcs11_v2.40/pkcs11t.h</i> */
    public static final int CKK_CAST5 = (int) 0x00000018;
    /** <i>native declaration : pkcs11_v2.40/pkcs11t.h</i> */
    public static final int CKK_CAST128 = (int) 0x00000018;
    /** <i>native declaration : pkcs11_v2.40/pkcs11t.h</i> */
    public static final int CKK_RC5 = (int) 0x00000019;
    /** <i>native declaration : pkcs11_v2.40/pkcs11t.h</i> */
    public static final int CKK_IDEA = (int) 0x0000001A;
    /** <i>native declaration : pkcs11_v2.40/pkcs11t.h</i> */
    public static final int CKK_SKIPJACK = (int) 0x0000001B;
    /** <i>native declaration : pkcs11_v2.40/pkcs11t.h</i> */
    public static final int CKK_BATON = (int) 0x0000001C;
    /** <i>native declaration : pkcs11_v2.40/pkcs11t.h</i> */
    public static final int CKK_JUNIPER = (int) 0x0000001D;
    /** <i>native declaration : pkcs11_v2.40/pkcs11t.h</i> */
    public static final int CKK_CDMF = (int) 0x0000001E;
    /** <i>native declaration : pkcs11_v2.40/pkcs11t.h</i> */
    public static final int CKK_AES = (int) 0x0000001F;
    /** <i>native declaration : pkcs11_v2.40/pkcs11t.h</i> */
    public static final int CKK_BLOWFISH = (int) 0x00000020;
    /** <i>native declaration : pkcs11_v2.40/pkcs11t.h</i> */
    public static final int CKK_TWOFISH = (int) 0x00000021;
    /** <i>native declaration : pkcs11_v2.40/pkcs11t.h</i> */
    public static final int CKK_SECURID = (int) 0x00000022;
    /** <i>native declaration : pkcs11_v2.40/pkcs11t.h</i> */
    public static final int CKK_HOTP = (int) 0x00000023;
    /** <i>native declaration : pkcs11_v2.40/pkcs11t.h</i> */
    public static final int CKK_ACTI = (int) 0x00000024;
    /** <i>native declaration : pkcs11_v2.40/pkcs11t.h</i> */
    public static final int CKK_CAMELLIA = (int) 0x00000025;
    /** <i>native declaration : pkcs11_v2.40/pkcs11t.h</i> */
    public static final int CKK_ARIA = (int) 0x00000026;
    /** <i>native declaration : pkcs11_v2.40/pkcs11t.h</i> */
    public static final int CKK_MD5_HMAC = (int) 0x00000027;
    /** <i>native declaration : pkcs11_v2.40/pkcs11t.h</i> */
    public static final int CKK_SHA_1_HMAC = (int) 0x00000028;
    /** <i>native declaration : pkcs11_v2.40/pkcs11t.h</i> */
    public static final int CKK_RIPEMD128_HMAC = (int) 0x00000029;
    /** <i>native declaration : pkcs11_v2.40/pkcs11t.h</i> */
    public static final int CKK_RIPEMD160_HMAC = (int) 0x0000002A;
    /** <i>native declaration : pkcs11_v2.40/pkcs11t.h</i> */
    public static final int CKK_SHA256_HMAC = (int) 0x0000002B;
    /** <i>native declaration : pkcs11_v2.40/pkcs11t.h</i> */
    public static final int CKK_SHA384_HMAC = (int) 0x0000002C;
    /** <i>native declaration : pkcs11_v2.40/pkcs11t.h</i> */
    public static final int CKK_SHA512_HMAC = (int) 0x0000002D;
    /** <i>native declaration : pkcs11_v2.40/pkcs11t.h</i> */
    public static final int CKK_SHA224_HMAC = (int) 0x0000002E;
    /** <i>native declaration : pkcs11_v2.40/pkcs11t.h</i> */
    public static final int CKK_SEED = (int) 0x0000002F;
    /** <i>native declaration : pkcs11_v2.40/pkcs11t.h</i> */
    public static final int CKK_GOSTR3410 = (int) 0x00000030;
    /** <i>native declaration : pkcs11_v2.40/pkcs11t.h</i> */
    public static final int CKK_GOSTR3411 = (int) 0x00000031;
    /** <i>native declaration : pkcs11_v2.40/pkcs11t.h</i> */
    public static final int CKK_GOST28147 = (int) 0x00000032;
    /** <i>native declaration : pkcs11_v2.40/pkcs11t.h</i> */
    public static final int CKK_VENDOR_DEFINED = (int) 0x80000000;
    /** <i>native declaration : pkcs11_v2.40/pkcs11t.h</i> */
    public static final int CK_CERTIFICATE_CATEGORY_UNSPECIFIED = (int) 0;
    /** <i>native declaration : pkcs11_v2.40/pkcs11t.h</i> */
    public static final int CK_CERTIFICATE_CATEGORY_TOKEN_USER = (int) 1;
    /** <i>native declaration : pkcs11_v2.40/pkcs11t.h</i> */
    public static final int CK_CERTIFICATE_CATEGORY_AUTHORITY = (int) 2;
    /** <i>native declaration : pkcs11_v2.40/pkcs11t.h</i> */
    public static final int CK_CERTIFICATE_CATEGORY_OTHER_ENTITY = (int) 3;
    /** <i>native declaration : pkcs11_v2.40/pkcs11t.h</i> */
    public static final int CK_SECURITY_DOMAIN_UNSPECIFIED = (int) 0;
    /** <i>native declaration : pkcs11_v2.40/pkcs11t.h</i> */
    public static final int CK_SECURITY_DOMAIN_MANUFACTURER = (int) 1;
    /** <i>native declaration : pkcs11_v2.40/pkcs11t.h</i> */
    public static final int CK_SECURITY_DOMAIN_OPERATOR = (int) 2;
    /** <i>native declaration : pkcs11_v2.40/pkcs11t.h</i> */
    public static final int CK_SECURITY_DOMAIN_THIRD_PARTY = (int) 3;
    /** <i>native declaration : pkcs11_v2.40/pkcs11t.h</i> */
    public static final int CKC_X_509 = (int) 0x00000000;
    /** <i>native declaration : pkcs11_v2.40/pkcs11t.h</i> */
    public static final int CKC_X_509_ATTR_CERT = (int) 0x00000001;
    /** <i>native declaration : pkcs11_v2.40/pkcs11t.h</i> */
    public static final int CKC_WTLS = (int) 0x00000002;
    /** <i>native declaration : pkcs11_v2.40/pkcs11t.h</i> */
    public static final int CKC_VENDOR_DEFINED = (int) 0x80000000;
    /** <i>native declaration : pkcs11_v2.40/pkcs11t.h</i> */
    public static final int CKF_ARRAY_ATTRIBUTE = (int) 0x40000000;
    /** <i>native declaration : pkcs11_v2.40/pkcs11t.h</i> */
    public static final int CK_OTP_FORMAT_DECIMAL = (int) 0;
    /** <i>native declaration : pkcs11_v2.40/pkcs11t.h</i> */
    public static final int CK_OTP_FORMAT_HEXADECIMAL = (int) 1;
    /** <i>native declaration : pkcs11_v2.40/pkcs11t.h</i> */
    public static final int CK_OTP_FORMAT_ALPHANUMERIC = (int) 2;
    /** <i>native declaration : pkcs11_v2.40/pkcs11t.h</i> */
    public static final int CK_OTP_FORMAT_BINARY = (int) 3;
    /** <i>native declaration : pkcs11_v2.40/pkcs11t.h</i> */
    public static final int CK_OTP_PARAM_IGNORED = (int) 0;
    /** <i>native declaration : pkcs11_v2.40/pkcs11t.h</i> */
    public static final int CK_OTP_PARAM_OPTIONAL = (int) 1;
    /** <i>native declaration : pkcs11_v2.40/pkcs11t.h</i> */
    public static final int CK_OTP_PARAM_MANDATORY = (int) 2;
    /** <i>native declaration : pkcs11_v2.40/pkcs11t.h</i> */
    public static final int CKA_CLASS = (int) 0x00000000;
    /** <i>native declaration : pkcs11_v2.40/pkcs11t.h</i> */
    public static final int CKA_TOKEN = (int) 0x00000001;
    /** <i>native declaration : pkcs11_v2.40/pkcs11t.h</i> */
    public static final int CKA_PRIVATE = (int) 0x00000002;
    /** <i>native declaration : pkcs11_v2.40/pkcs11t.h</i> */
    public static final int CKA_LABEL = (int) 0x00000003;
    /** <i>native declaration : pkcs11_v2.40/pkcs11t.h</i> */
    public static final int CKA_APPLICATION = (int) 0x00000010;
    /** <i>native declaration : pkcs11_v2.40/pkcs11t.h</i> */
    public static final int CKA_VALUE = (int) 0x00000011;
    /** <i>native declaration : pkcs11_v2.40/pkcs11t.h</i> */
    public static final int CKA_OBJECT_ID = (int) 0x00000012;
    /** <i>native declaration : pkcs11_v2.40/pkcs11t.h</i> */
    public static final int CKA_CERTIFICATE_TYPE = (int) 0x00000080;
    /** <i>native declaration : pkcs11_v2.40/pkcs11t.h</i> */
    public static final int CKA_ISSUER = (int) 0x00000081;
    /** <i>native declaration : pkcs11_v2.40/pkcs11t.h</i> */
    public static final int CKA_SERIAL_NUMBER = (int) 0x00000082;
    /** <i>native declaration : pkcs11_v2.40/pkcs11t.h</i> */
    public static final int CKA_AC_ISSUER = (int) 0x00000083;
    /** <i>native declaration : pkcs11_v2.40/pkcs11t.h</i> */
    public static final int CKA_OWNER = (int) 0x00000084;
    /** <i>native declaration : pkcs11_v2.40/pkcs11t.h</i> */
    public static final int CKA_ATTR_TYPES = (int) 0x00000085;
    /** <i>native declaration : pkcs11_v2.40/pkcs11t.h</i> */
    public static final int CKA_TRUSTED = (int) 0x00000086;
    /** <i>native declaration : pkcs11_v2.40/pkcs11t.h</i> */
    public static final int CKA_CERTIFICATE_CATEGORY = (int) 0x00000087;
    /** <i>native declaration : pkcs11_v2.40/pkcs11t.h</i> */
    public static final int CKA_JAVA_MIDP_SECURITY_DOMAIN = (int) 0x00000088;
    /** <i>native declaration : pkcs11_v2.40/pkcs11t.h</i> */
    public static final int CKA_URL = (int) 0x00000089;
    /** <i>native declaration : pkcs11_v2.40/pkcs11t.h</i> */
    public static final int CKA_HASH_OF_SUBJECT_PUBLIC_KEY = (int) 0x0000008A;
    /** <i>native declaration : pkcs11_v2.40/pkcs11t.h</i> */
    public static final int CKA_HASH_OF_ISSUER_PUBLIC_KEY = (int) 0x0000008B;
    /** <i>native declaration : pkcs11_v2.40/pkcs11t.h</i> */
    public static final int CKA_NAME_HASH_ALGORITHM = (int) 0x0000008C;
    /** <i>native declaration : pkcs11_v2.40/pkcs11t.h</i> */
    public static final int CKA_CHECK_VALUE = (int) 0x00000090;
    /** <i>native declaration : pkcs11_v2.40/pkcs11t.h</i> */
    public static final int CKA_KEY_TYPE = (int) 0x00000100;
    /** <i>native declaration : pkcs11_v2.40/pkcs11t.h</i> */
    public static final int CKA_SUBJECT = (int) 0x00000101;
    /** <i>native declaration : pkcs11_v2.40/pkcs11t.h</i> */
    public static final int CKA_ID = (int) 0x00000102;
    /** <i>native declaration : pkcs11_v2.40/pkcs11t.h</i> */
    public static final int CKA_SENSITIVE = (int) 0x00000103;
    /** <i>native declaration : pkcs11_v2.40/pkcs11t.h</i> */
    public static final int CKA_ENCRYPT = (int) 0x00000104;
    /** <i>native declaration : pkcs11_v2.40/pkcs11t.h</i> */
    public static final int CKA_DECRYPT = (int) 0x00000105;
    /** <i>native declaration : pkcs11_v2.40/pkcs11t.h</i> */
    public static final int CKA_WRAP = (int) 0x00000106;
    /** <i>native declaration : pkcs11_v2.40/pkcs11t.h</i> */
    public static final int CKA_UNWRAP = (int) 0x00000107;
    /** <i>native declaration : pkcs11_v2.40/pkcs11t.h</i> */
    public static final int CKA_SIGN = (int) 0x00000108;
    /** <i>native declaration : pkcs11_v2.40/pkcs11t.h</i> */
    public static final int CKA_SIGN_RECOVER = (int) 0x00000109;
    /** <i>native declaration : pkcs11_v2.40/pkcs11t.h</i> */
    public static final int CKA_VERIFY = (int) 0x0000010A;
    /** <i>native declaration : pkcs11_v2.40/pkcs11t.h</i> */
    public static final int CKA_VERIFY_RECOVER = (int) 0x0000010B;
    /** <i>native declaration : pkcs11_v2.40/pkcs11t.h</i> */
    public static final int CKA_DERIVE = (int) 0x0000010C;
    /** <i>native declaration : pkcs11_v2.40/pkcs11t.h</i> */
    public static final int CKA_START_DATE = (int) 0x00000110;
    /** <i>native declaration : pkcs11_v2.40/pkcs11t.h</i> */
    public static final int CKA_END_DATE = (int) 0x00000111;
    /** <i>native declaration : pkcs11_v2.40/pkcs11t.h</i> */
    public static final int CKA_MODULUS = (int) 0x00000120;
    /** <i>native declaration : pkcs11_v2.40/pkcs11t.h</i> */
    public static final int CKA_MODULUS_BITS = (int) 0x00000121;
    /** <i>native declaration : pkcs11_v2.40/pkcs11t.h</i> */
    public static final int CKA_PUBLIC_EXPONENT = (int) 0x00000122;
    /** <i>native declaration : pkcs11_v2.40/pkcs11t.h</i> */
    public static final int CKA_PRIVATE_EXPONENT = (int) 0x00000123;
    /** <i>native declaration : pkcs11_v2.40/pkcs11t.h</i> */
    public static final int CKA_PRIME_1 = (int) 0x00000124;
    /** <i>native declaration : pkcs11_v2.40/pkcs11t.h</i> */
    public static final int CKA_PRIME_2 = (int) 0x00000125;
    /** <i>native declaration : pkcs11_v2.40/pkcs11t.h</i> */
    public static final int CKA_EXPONENT_1 = (int) 0x00000126;
    /** <i>native declaration : pkcs11_v2.40/pkcs11t.h</i> */
    public static final int CKA_EXPONENT_2 = (int) 0x00000127;
    /** <i>native declaration : pkcs11_v2.40/pkcs11t.h</i> */
    public static final int CKA_COEFFICIENT = (int) 0x00000128;
    /** <i>native declaration : pkcs11_v2.40/pkcs11t.h</i> */
    public static final int CKA_PUBLIC_KEY_INFO = (int) 0x00000129;
    /** <i>native declaration : pkcs11_v2.40/pkcs11t.h</i> */
    public static final int CKA_PRIME = (int) 0x00000130;
    /** <i>native declaration : pkcs11_v2.40/pkcs11t.h</i> */
    public static final int CKA_SUBPRIME = (int) 0x00000131;
    /** <i>native declaration : pkcs11_v2.40/pkcs11t.h</i> */
    public static final int CKA_BASE = (int) 0x00000132;
    /** <i>native declaration : pkcs11_v2.40/pkcs11t.h</i> */
    public static final int CKA_PRIME_BITS = (int) 0x00000133;
    /** <i>native declaration : pkcs11_v2.40/pkcs11t.h</i> */
    public static final int CKA_SUBPRIME_BITS = (int) 0x00000134;
    /** <i>native declaration : pkcs11_v2.40/pkcs11t.h</i> */
    public static final int CKA_SUB_PRIME_BITS = (int) 0x00000134;
    /** <i>native declaration : pkcs11_v2.40/pkcs11t.h</i> */
    public static final int CKA_VALUE_BITS = (int) 0x00000160;
    /** <i>native declaration : pkcs11_v2.40/pkcs11t.h</i> */
    public static final int CKA_VALUE_LEN = (int) 0x00000161;
    /** <i>native declaration : pkcs11_v2.40/pkcs11t.h</i> */
    public static final int CKA_EXTRACTABLE = (int) 0x00000162;
    /** <i>native declaration : pkcs11_v2.40/pkcs11t.h</i> */
    public static final int CKA_LOCAL = (int) 0x00000163;
    /** <i>native declaration : pkcs11_v2.40/pkcs11t.h</i> */
    public static final int CKA_NEVER_EXTRACTABLE = (int) 0x00000164;
    /** <i>native declaration : pkcs11_v2.40/pkcs11t.h</i> */
    public static final int CKA_ALWAYS_SENSITIVE = (int) 0x00000165;
    /** <i>native declaration : pkcs11_v2.40/pkcs11t.h</i> */
    public static final int CKA_KEY_GEN_MECHANISM = (int) 0x00000166;
    /** <i>native declaration : pkcs11_v2.40/pkcs11t.h</i> */
    public static final int CKA_MODIFIABLE = (int) 0x00000170;
    /** <i>native declaration : pkcs11_v2.40/pkcs11t.h</i> */
    public static final int CKA_COPYABLE = (int) 0x00000171;
    /** <i>native declaration : pkcs11_v2.40/pkcs11t.h</i> */
    public static final int CKA_DESTROYABLE = (int) 0x00000172;
    /** <i>native declaration : pkcs11_v2.40/pkcs11t.h</i> */
    public static final int CKA_ECDSA_PARAMS = (int) 0x00000180;
    /** <i>native declaration : pkcs11_v2.40/pkcs11t.h</i> */
    public static final int CKA_EC_PARAMS = (int) 0x00000180;
    /** <i>native declaration : pkcs11_v2.40/pkcs11t.h</i> */
    public static final int CKA_EC_POINT = (int) 0x00000181;
    /** <i>native declaration : pkcs11_v2.40/pkcs11t.h</i> */
    public static final int CKA_SECONDARY_AUTH = (int) 0x00000200;
    /** <i>native declaration : pkcs11_v2.40/pkcs11t.h</i> */
    public static final int CKA_AUTH_PIN_FLAGS = (int) 0x00000201;
    /** <i>native declaration : pkcs11_v2.40/pkcs11t.h</i> */
    public static final int CKA_ALWAYS_AUTHENTICATE = (int) 0x00000202;
    /** <i>native declaration : pkcs11_v2.40/pkcs11t.h</i> */
    public static final int CKA_WRAP_WITH_TRUSTED = (int) 0x00000210;
    /** <i>native declaration : pkcs11_v2.40/pkcs11t.h</i> */
    public static final int CKA_WRAP_TEMPLATE = (int) (0x40000000 | 0x00000211);
    /** <i>native declaration : pkcs11_v2.40/pkcs11t.h</i> */
    public static final int CKA_UNWRAP_TEMPLATE = (int) (0x40000000 | 0x00000212);
    /** <i>native declaration : pkcs11_v2.40/pkcs11t.h</i> */
    public static final int CKA_DERIVE_TEMPLATE = (int) (0x40000000 | 0x00000213);
    /** <i>native declaration : pkcs11_v2.40/pkcs11t.h</i> */
    public static final int CKA_OTP_FORMAT = (int) 0x00000220;
    /** <i>native declaration : pkcs11_v2.40/pkcs11t.h</i> */
    public static final int CKA_OTP_LENGTH = (int) 0x00000221;
    /** <i>native declaration : pkcs11_v2.40/pkcs11t.h</i> */
    public static final int CKA_OTP_TIME_INTERVAL = (int) 0x00000222;
    /** <i>native declaration : pkcs11_v2.40/pkcs11t.h</i> */
    public static final int CKA_OTP_USER_FRIENDLY_MODE = (int) 0x00000223;
    /** <i>native declaration : pkcs11_v2.40/pkcs11t.h</i> */
    public static final int CKA_OTP_CHALLENGE_REQUIREMENT = (int) 0x00000224;
    /** <i>native declaration : pkcs11_v2.40/pkcs11t.h</i> */
    public static final int CKA_OTP_TIME_REQUIREMENT = (int) 0x00000225;
    /** <i>native declaration : pkcs11_v2.40/pkcs11t.h</i> */
    public static final int CKA_OTP_COUNTER_REQUIREMENT = (int) 0x00000226;
    /** <i>native declaration : pkcs11_v2.40/pkcs11t.h</i> */
    public static final int CKA_OTP_PIN_REQUIREMENT = (int) 0x00000227;
    /** <i>native declaration : pkcs11_v2.40/pkcs11t.h</i> */
    public static final int CKA_OTP_COUNTER = (int) 0x0000022E;
    /** <i>native declaration : pkcs11_v2.40/pkcs11t.h</i> */
    public static final int CKA_OTP_TIME = (int) 0x0000022F;
    /** <i>native declaration : pkcs11_v2.40/pkcs11t.h</i> */
    public static final int CKA_OTP_USER_IDENTIFIER = (int) 0x0000022A;
    /** <i>native declaration : pkcs11_v2.40/pkcs11t.h</i> */
    public static final int CKA_OTP_SERVICE_IDENTIFIER = (int) 0x0000022B;
    /** <i>native declaration : pkcs11_v2.40/pkcs11t.h</i> */
    public static final int CKA_OTP_SERVICE_LOGO = (int) 0x0000022C;
    /** <i>native declaration : pkcs11_v2.40/pkcs11t.h</i> */
    public static final int CKA_OTP_SERVICE_LOGO_TYPE = (int) 0x0000022D;
    /** <i>native declaration : pkcs11_v2.40/pkcs11t.h</i> */
    public static final int CKA_GOSTR3410_PARAMS = (int) 0x00000250;
    /** <i>native declaration : pkcs11_v2.40/pkcs11t.h</i> */
    public static final int CKA_GOSTR3411_PARAMS = (int) 0x00000251;
    /** <i>native declaration : pkcs11_v2.40/pkcs11t.h</i> */
    public static final int CKA_GOST28147_PARAMS = (int) 0x00000252;
    /** <i>native declaration : pkcs11_v2.40/pkcs11t.h</i> */
    public static final int CKA_HW_FEATURE_TYPE = (int) 0x00000300;
    /** <i>native declaration : pkcs11_v2.40/pkcs11t.h</i> */
    public static final int CKA_RESET_ON_INIT = (int) 0x00000301;
    /** <i>native declaration : pkcs11_v2.40/pkcs11t.h</i> */
    public static final int CKA_HAS_RESET = (int) 0x00000302;
    /** <i>native declaration : pkcs11_v2.40/pkcs11t.h</i> */
    public static final int CKA_PIXEL_X = (int) 0x00000400;
    /** <i>native declaration : pkcs11_v2.40/pkcs11t.h</i> */
    public static final int CKA_PIXEL_Y = (int) 0x00000401;
    /** <i>native declaration : pkcs11_v2.40/pkcs11t.h</i> */
    public static final int CKA_RESOLUTION = (int) 0x00000402;
    /** <i>native declaration : pkcs11_v2.40/pkcs11t.h</i> */
    public static final int CKA_CHAR_ROWS = (int) 0x00000403;
    /** <i>native declaration : pkcs11_v2.40/pkcs11t.h</i> */
    public static final int CKA_CHAR_COLUMNS = (int) 0x00000404;
    /** <i>native declaration : pkcs11_v2.40/pkcs11t.h</i> */
    public static final int CKA_COLOR = (int) 0x00000405;
    /** <i>native declaration : pkcs11_v2.40/pkcs11t.h</i> */
    public static final int CKA_BITS_PER_PIXEL = (int) 0x00000406;
    /** <i>native declaration : pkcs11_v2.40/pkcs11t.h</i> */
    public static final int CKA_CHAR_SETS = (int) 0x00000480;
    /** <i>native declaration : pkcs11_v2.40/pkcs11t.h</i> */
    public static final int CKA_ENCODING_METHODS = (int) 0x00000481;
    /** <i>native declaration : pkcs11_v2.40/pkcs11t.h</i> */
    public static final int CKA_MIME_TYPES = (int) 0x00000482;
    /** <i>native declaration : pkcs11_v2.40/pkcs11t.h</i> */
    public static final int CKA_MECHANISM_TYPE = (int) 0x00000500;
    /** <i>native declaration : pkcs11_v2.40/pkcs11t.h</i> */
    public static final int CKA_REQUIRED_CMS_ATTRIBUTES = (int) 0x00000501;
    /** <i>native declaration : pkcs11_v2.40/pkcs11t.h</i> */
    public static final int CKA_DEFAULT_CMS_ATTRIBUTES = (int) 0x00000502;
    /** <i>native declaration : pkcs11_v2.40/pkcs11t.h</i> */
    public static final int CKA_SUPPORTED_CMS_ATTRIBUTES = (int) 0x00000503;
    /** <i>native declaration : pkcs11_v2.40/pkcs11t.h</i> */
    public static final int CKA_ALLOWED_MECHANISMS = (int) (CKF_ARRAY_ATTRIBUTE | 0x00000600);
    /** <i>native declaration : pkcs11_v2.40/pkcs11t.h</i> */
    public static final int CKA_VENDOR_DEFINED = (int) 0x80000000;
    /** <i>native declaration : pkcs11_v2.40/pkcs11t.h</i> */
    public static final int CKM_RSA_PKCS_KEY_PAIR_GEN = (int) 0x00000000;
    /** <i>native declaration : pkcs11_v2.40/pkcs11t.h</i> */
    public static final int CKM_RSA_PKCS = (int) 0x00000001;
    /** <i>native declaration : pkcs11_v2.40/pkcs11t.h</i> */
    public static final int CKM_RSA_9796 = (int) 0x00000002;
    /** <i>native declaration : pkcs11_v2.40/pkcs11t.h</i> */
    public static final int CKM_RSA_X_509 = (int) 0x00000003;
    /** <i>native declaration : pkcs11_v2.40/pkcs11t.h</i> */
    public static final int CKM_MD2_RSA_PKCS = (int) 0x00000004;
    /** <i>native declaration : pkcs11_v2.40/pkcs11t.h</i> */
    public static final int CKM_MD5_RSA_PKCS = (int) 0x00000005;
    /** <i>native declaration : pkcs11_v2.40/pkcs11t.h</i> */
    public static final int CKM_SHA1_RSA_PKCS = (int) 0x00000006;
    /** <i>native declaration : pkcs11_v2.40/pkcs11t.h</i> */
    public static final int CKM_RIPEMD128_RSA_PKCS = (int) 0x00000007;
    /** <i>native declaration : pkcs11_v2.40/pkcs11t.h</i> */
    public static final int CKM_RIPEMD160_RSA_PKCS = (int) 0x00000008;
    /** <i>native declaration : pkcs11_v2.40/pkcs11t.h</i> */
    public static final int CKM_RSA_PKCS_OAEP = (int) 0x00000009;
    /** <i>native declaration : pkcs11_v2.40/pkcs11t.h</i> */
    public static final int CKM_RSA_X9_31_KEY_PAIR_GEN = (int) 0x0000000A;
    /** <i>native declaration : pkcs11_v2.40/pkcs11t.h</i> */
    public static final int CKM_RSA_X9_31 = (int) 0x0000000B;
    /** <i>native declaration : pkcs11_v2.40/pkcs11t.h</i> */
    public static final int CKM_SHA1_RSA_X9_31 = (int) 0x0000000C;
    /** <i>native declaration : pkcs11_v2.40/pkcs11t.h</i> */
    public static final int CKM_RSA_PKCS_PSS = (int) 0x0000000D;
    /** <i>native declaration : pkcs11_v2.40/pkcs11t.h</i> */
    public static final int CKM_SHA1_RSA_PKCS_PSS = (int) 0x0000000E;
    /** <i>native declaration : pkcs11_v2.40/pkcs11t.h</i> */
    public static final int CKM_DSA_KEY_PAIR_GEN = (int) 0x00000010;
    /** <i>native declaration : pkcs11_v2.40/pkcs11t.h</i> */
    public static final int CKM_DSA = (int) 0x00000011;
    /** <i>native declaration : pkcs11_v2.40/pkcs11t.h</i> */
    public static final int CKM_DSA_SHA1 = (int) 0x00000012;
    /** <i>native declaration : pkcs11_v2.40/pkcs11t.h</i> */
    public static final int CKM_DSA_SHA224 = (int) 0x00000013;
    /** <i>native declaration : pkcs11_v2.40/pkcs11t.h</i> */
    public static final int CKM_DSA_SHA256 = (int) 0x00000014;
    /** <i>native declaration : pkcs11_v2.40/pkcs11t.h</i> */
    public static final int CKM_DSA_SHA384 = (int) 0x00000015;
    /** <i>native declaration : pkcs11_v2.40/pkcs11t.h</i> */
    public static final int CKM_DSA_SHA512 = (int) 0x00000016;
    /** <i>native declaration : pkcs11_v2.40/pkcs11t.h</i> */
    public static final int CKM_DH_PKCS_KEY_PAIR_GEN = (int) 0x00000020;
    /** <i>native declaration : pkcs11_v2.40/pkcs11t.h</i> */
    public static final int CKM_DH_PKCS_DERIVE = (int) 0x00000021;
    /** <i>native declaration : pkcs11_v2.40/pkcs11t.h</i> */
    public static final int CKM_X9_42_DH_KEY_PAIR_GEN = (int) 0x00000030;
    /** <i>native declaration : pkcs11_v2.40/pkcs11t.h</i> */
    public static final int CKM_X9_42_DH_DERIVE = (int) 0x00000031;
    /** <i>native declaration : pkcs11_v2.40/pkcs11t.h</i> */
    public static final int CKM_X9_42_DH_HYBRID_DERIVE = (int) 0x00000032;
    /** <i>native declaration : pkcs11_v2.40/pkcs11t.h</i> */
    public static final int CKM_X9_42_MQV_DERIVE = (int) 0x00000033;
    /** <i>native declaration : pkcs11_v2.40/pkcs11t.h</i> */
    public static final int CKM_SHA256_RSA_PKCS = (int) 0x00000040;
    /** <i>native declaration : pkcs11_v2.40/pkcs11t.h</i> */
    public static final int CKM_SHA384_RSA_PKCS = (int) 0x00000041;
    /** <i>native declaration : pkcs11_v2.40/pkcs11t.h</i> */
    public static final int CKM_SHA512_RSA_PKCS = (int) 0x00000042;
    /** <i>native declaration : pkcs11_v2.40/pkcs11t.h</i> */
    public static final int CKM_SHA256_RSA_PKCS_PSS = (int) 0x00000043;
    /** <i>native declaration : pkcs11_v2.40/pkcs11t.h</i> */
    public static final int CKM_SHA384_RSA_PKCS_PSS = (int) 0x00000044;
    /** <i>native declaration : pkcs11_v2.40/pkcs11t.h</i> */
    public static final int CKM_SHA512_RSA_PKCS_PSS = (int) 0x00000045;
    /** <i>native declaration : pkcs11_v2.40/pkcs11t.h</i> */
    public static final int CKM_SHA224_RSA_PKCS = (int) 0x00000046;
    /** <i>native declaration : pkcs11_v2.40/pkcs11t.h</i> */
    public static final int CKM_SHA224_RSA_PKCS_PSS = (int) 0x00000047;
    /** <i>native declaration : pkcs11_v2.40/pkcs11t.h</i> */
    public static final int CKM_SHA512_224 = (int) 0x00000048;
    /** <i>native declaration : pkcs11_v2.40/pkcs11t.h</i> */
    public static final int CKM_SHA512_224_HMAC = (int) 0x00000049;
    /** <i>native declaration : pkcs11_v2.40/pkcs11t.h</i> */
    public static final int CKM_SHA512_224_HMAC_GENERAL = (int) 0x0000004A;
    /** <i>native declaration : pkcs11_v2.40/pkcs11t.h</i> */
    public static final int CKM_SHA512_224_KEY_DERIVATION = (int) 0x0000004B;
    /** <i>native declaration : pkcs11_v2.40/pkcs11t.h</i> */
    public static final int CKM_SHA512_256 = (int) 0x0000004C;
    /** <i>native declaration : pkcs11_v2.40/pkcs11t.h</i> */
    public static final int CKM_SHA512_256_HMAC = (int) 0x0000004D;
    /** <i>native declaration : pkcs11_v2.40/pkcs11t.h</i> */
    public static final int CKM_SHA512_256_HMAC_GENERAL = (int) 0x0000004E;
    /** <i>native declaration : pkcs11_v2.40/pkcs11t.h</i> */
    public static final int CKM_SHA512_256_KEY_DERIVATION = (int) 0x0000004F;
    /** <i>native declaration : pkcs11_v2.40/pkcs11t.h</i> */
    public static final int CKM_SHA512_T = (int) 0x00000050;
    /** <i>native declaration : pkcs11_v2.40/pkcs11t.h</i> */
    public static final int CKM_SHA512_T_HMAC = (int) 0x00000051;
    /** <i>native declaration : pkcs11_v2.40/pkcs11t.h</i> */
    public static final int CKM_SHA512_T_HMAC_GENERAL = (int) 0x00000052;
    /** <i>native declaration : pkcs11_v2.40/pkcs11t.h</i> */
    public static final int CKM_SHA512_T_KEY_DERIVATION = (int) 0x00000053;
    /** <i>native declaration : pkcs11_v2.40/pkcs11t.h</i> */
    public static final int CKM_RC2_KEY_GEN = (int) 0x00000100;
    /** <i>native declaration : pkcs11_v2.40/pkcs11t.h</i> */
    public static final int CKM_RC2_ECB = (int) 0x00000101;
    /** <i>native declaration : pkcs11_v2.40/pkcs11t.h</i> */
    public static final int CKM_RC2_CBC = (int) 0x00000102;
    /** <i>native declaration : pkcs11_v2.40/pkcs11t.h</i> */
    public static final int CKM_RC2_MAC = (int) 0x00000103;
    /** <i>native declaration : pkcs11_v2.40/pkcs11t.h</i> */
    public static final int CKM_RC2_MAC_GENERAL = (int) 0x00000104;
    /** <i>native declaration : pkcs11_v2.40/pkcs11t.h</i> */
    public static final int CKM_RC2_CBC_PAD = (int) 0x00000105;
    /** <i>native declaration : pkcs11_v2.40/pkcs11t.h</i> */
    public static final int CKM_RC4_KEY_GEN = (int) 0x00000110;
    /** <i>native declaration : pkcs11_v2.40/pkcs11t.h</i> */
    public static final int CKM_RC4 = (int) 0x00000111;
    /** <i>native declaration : pkcs11_v2.40/pkcs11t.h</i> */
    public static final int CKM_DES_KEY_GEN = (int) 0x00000120;
    /** <i>native declaration : pkcs11_v2.40/pkcs11t.h</i> */
    public static final int CKM_DES_ECB = (int) 0x00000121;
    /** <i>native declaration : pkcs11_v2.40/pkcs11t.h</i> */
    public static final int CKM_DES_CBC = (int) 0x00000122;
    /** <i>native declaration : pkcs11_v2.40/pkcs11t.h</i> */
    public static final int CKM_DES_MAC = (int) 0x00000123;
    /** <i>native declaration : pkcs11_v2.40/pkcs11t.h</i> */
    public static final int CKM_DES_MAC_GENERAL = (int) 0x00000124;
    /** <i>native declaration : pkcs11_v2.40/pkcs11t.h</i> */
    public static final int CKM_DES_CBC_PAD = (int) 0x00000125;
    /** <i>native declaration : pkcs11_v2.40/pkcs11t.h</i> */
    public static final int CKM_DES2_KEY_GEN = (int) 0x00000130;
    /** <i>native declaration : pkcs11_v2.40/pkcs11t.h</i> */
    public static final int CKM_DES3_KEY_GEN = (int) 0x00000131;
    /** <i>native declaration : pkcs11_v2.40/pkcs11t.h</i> */
    public static final int CKM_DES3_ECB = (int) 0x00000132;
    /** <i>native declaration : pkcs11_v2.40/pkcs11t.h</i> */
    public static final int CKM_DES3_CBC = (int) 0x00000133;
    /** <i>native declaration : pkcs11_v2.40/pkcs11t.h</i> */
    public static final int CKM_DES3_MAC = (int) 0x00000134;
    /** <i>native declaration : pkcs11_v2.40/pkcs11t.h</i> */
    public static final int CKM_DES3_MAC_GENERAL = (int) 0x00000135;
    /** <i>native declaration : pkcs11_v2.40/pkcs11t.h</i> */
    public static final int CKM_DES3_CBC_PAD = (int) 0x00000136;
    /** <i>native declaration : pkcs11_v2.40/pkcs11t.h</i> */
    public static final int CKM_DES3_CMAC_GENERAL = (int) 0x00000137;
    /** <i>native declaration : pkcs11_v2.40/pkcs11t.h</i> */
    public static final int CKM_DES3_CMAC = (int) 0x00000138;
    /** <i>native declaration : pkcs11_v2.40/pkcs11t.h</i> */
    public static final int CKM_CDMF_KEY_GEN = (int) 0x00000140;
    /** <i>native declaration : pkcs11_v2.40/pkcs11t.h</i> */
    public static final int CKM_CDMF_ECB = (int) 0x00000141;
    /** <i>native declaration : pkcs11_v2.40/pkcs11t.h</i> */
    public static final int CKM_CDMF_CBC = (int) 0x00000142;
    /** <i>native declaration : pkcs11_v2.40/pkcs11t.h</i> */
    public static final int CKM_CDMF_MAC = (int) 0x00000143;
    /** <i>native declaration : pkcs11_v2.40/pkcs11t.h</i> */
    public static final int CKM_CDMF_MAC_GENERAL = (int) 0x00000144;
    /** <i>native declaration : pkcs11_v2.40/pkcs11t.h</i> */
    public static final int CKM_CDMF_CBC_PAD = (int) 0x00000145;
    /** <i>native declaration : pkcs11_v2.40/pkcs11t.h</i> */
    public static final int CKM_DES_OFB64 = (int) 0x00000150;
    /** <i>native declaration : pkcs11_v2.40/pkcs11t.h</i> */
    public static final int CKM_DES_OFB8 = (int) 0x00000151;
    /** <i>native declaration : pkcs11_v2.40/pkcs11t.h</i> */
    public static final int CKM_DES_CFB64 = (int) 0x00000152;
    /** <i>native declaration : pkcs11_v2.40/pkcs11t.h</i> */
    public static final int CKM_DES_CFB8 = (int) 0x00000153;
    /** <i>native declaration : pkcs11_v2.40/pkcs11t.h</i> */
    public static final int CKM_MD2 = (int) 0x00000200;
    /** <i>native declaration : pkcs11_v2.40/pkcs11t.h</i> */
    public static final int CKM_MD2_HMAC = (int) 0x00000201;
    /** <i>native declaration : pkcs11_v2.40/pkcs11t.h</i> */
    public static final int CKM_MD2_HMAC_GENERAL = (int) 0x00000202;
    /** <i>native declaration : pkcs11_v2.40/pkcs11t.h</i> */
    public static final int CKM_MD5 = (int) 0x00000210;
    /** <i>native declaration : pkcs11_v2.40/pkcs11t.h</i> */
    public static final int CKM_MD5_HMAC = (int) 0x00000211;
    /** <i>native declaration : pkcs11_v2.40/pkcs11t.h</i> */
    public static final int CKM_MD5_HMAC_GENERAL = (int) 0x00000212;
    /** <i>native declaration : pkcs11_v2.40/pkcs11t.h</i> */
    public static final int CKM_SHA_1 = (int) 0x00000220;
    /** <i>native declaration : pkcs11_v2.40/pkcs11t.h</i> */
    public static final int CKM_SHA_1_HMAC = (int) 0x00000221;
    /** <i>native declaration : pkcs11_v2.40/pkcs11t.h</i> */
    public static final int CKM_SHA_1_HMAC_GENERAL = (int) 0x00000222;
    /** <i>native declaration : pkcs11_v2.40/pkcs11t.h</i> */
    public static final int CKM_RIPEMD128 = (int) 0x00000230;
    /** <i>native declaration : pkcs11_v2.40/pkcs11t.h</i> */
    public static final int CKM_RIPEMD128_HMAC = (int) 0x00000231;
    /** <i>native declaration : pkcs11_v2.40/pkcs11t.h</i> */
    public static final int CKM_RIPEMD128_HMAC_GENERAL = (int) 0x00000232;
    /** <i>native declaration : pkcs11_v2.40/pkcs11t.h</i> */
    public static final int CKM_RIPEMD160 = (int) 0x00000240;
    /** <i>native declaration : pkcs11_v2.40/pkcs11t.h</i> */
    public static final int CKM_RIPEMD160_HMAC = (int) 0x00000241;
    /** <i>native declaration : pkcs11_v2.40/pkcs11t.h</i> */
    public static final int CKM_RIPEMD160_HMAC_GENERAL = (int) 0x00000242;
    /** <i>native declaration : pkcs11_v2.40/pkcs11t.h</i> */
    public static final int CKM_SHA256 = (int) 0x00000250;
    /** <i>native declaration : pkcs11_v2.40/pkcs11t.h</i> */
    public static final int CKM_SHA256_HMAC = (int) 0x00000251;
    /** <i>native declaration : pkcs11_v2.40/pkcs11t.h</i> */
    public static final int CKM_SHA256_HMAC_GENERAL = (int) 0x00000252;
    /** <i>native declaration : pkcs11_v2.40/pkcs11t.h</i> */
    public static final int CKM_SHA224 = (int) 0x00000255;
    /** <i>native declaration : pkcs11_v2.40/pkcs11t.h</i> */
    public static final int CKM_SHA224_HMAC = (int) 0x00000256;
    /** <i>native declaration : pkcs11_v2.40/pkcs11t.h</i> */
    public static final int CKM_SHA224_HMAC_GENERAL = (int) 0x00000257;
    /** <i>native declaration : pkcs11_v2.40/pkcs11t.h</i> */
    public static final int CKM_SHA384 = (int) 0x00000260;
    /** <i>native declaration : pkcs11_v2.40/pkcs11t.h</i> */
    public static final int CKM_SHA384_HMAC = (int) 0x00000261;
    /** <i>native declaration : pkcs11_v2.40/pkcs11t.h</i> */
    public static final int CKM_SHA384_HMAC_GENERAL = (int) 0x00000262;
    /** <i>native declaration : pkcs11_v2.40/pkcs11t.h</i> */
    public static final int CKM_SHA512 = (int) 0x00000270;
    /** <i>native declaration : pkcs11_v2.40/pkcs11t.h</i> */
    public static final int CKM_SHA512_HMAC = (int) 0x00000271;
    /** <i>native declaration : pkcs11_v2.40/pkcs11t.h</i> */
    public static final int CKM_SHA512_HMAC_GENERAL = (int) 0x00000272;
    /** <i>native declaration : pkcs11_v2.40/pkcs11t.h</i> */
    public static final int CKM_SECURID_KEY_GEN = (int) 0x00000280;
    /** <i>native declaration : pkcs11_v2.40/pkcs11t.h</i> */
    public static final int CKM_SECURID = (int) 0x00000282;
    /** <i>native declaration : pkcs11_v2.40/pkcs11t.h</i> */
    public static final int CKM_HOTP_KEY_GEN = (int) 0x00000290;
    /** <i>native declaration : pkcs11_v2.40/pkcs11t.h</i> */
    public static final int CKM_HOTP = (int) 0x00000291;
    /** <i>native declaration : pkcs11_v2.40/pkcs11t.h</i> */
    public static final int CKM_ACTI = (int) 0x000002A0;
    /** <i>native declaration : pkcs11_v2.40/pkcs11t.h</i> */
    public static final int CKM_ACTI_KEY_GEN = (int) 0x000002A1;
    /** <i>native declaration : pkcs11_v2.40/pkcs11t.h</i> */
    public static final int CKM_CAST_KEY_GEN = (int) 0x00000300;
    /** <i>native declaration : pkcs11_v2.40/pkcs11t.h</i> */
    public static final int CKM_CAST_ECB = (int) 0x00000301;
    /** <i>native declaration : pkcs11_v2.40/pkcs11t.h</i> */
    public static final int CKM_CAST_CBC = (int) 0x00000302;
    /** <i>native declaration : pkcs11_v2.40/pkcs11t.h</i> */
    public static final int CKM_CAST_MAC = (int) 0x00000303;
    /** <i>native declaration : pkcs11_v2.40/pkcs11t.h</i> */
    public static final int CKM_CAST_MAC_GENERAL = (int) 0x00000304;
    /** <i>native declaration : pkcs11_v2.40/pkcs11t.h</i> */
    public static final int CKM_CAST_CBC_PAD = (int) 0x00000305;
    /** <i>native declaration : pkcs11_v2.40/pkcs11t.h</i> */
    public static final int CKM_CAST3_KEY_GEN = (int) 0x00000310;
    /** <i>native declaration : pkcs11_v2.40/pkcs11t.h</i> */
    public static final int CKM_CAST3_ECB = (int) 0x00000311;
    /** <i>native declaration : pkcs11_v2.40/pkcs11t.h</i> */
    public static final int CKM_CAST3_CBC = (int) 0x00000312;
    /** <i>native declaration : pkcs11_v2.40/pkcs11t.h</i> */
    public static final int CKM_CAST3_MAC = (int) 0x00000313;
    /** <i>native declaration : pkcs11_v2.40/pkcs11t.h</i> */
    public static final int CKM_CAST3_MAC_GENERAL = (int) 0x00000314;
    /** <i>native declaration : pkcs11_v2.40/pkcs11t.h</i> */
    public static final int CKM_CAST3_CBC_PAD = (int) 0x00000315;
    /** <i>native declaration : pkcs11_v2.40/pkcs11t.h</i> */
    public static final int CKM_CAST5_KEY_GEN = (int) 0x00000320;
    /** <i>native declaration : pkcs11_v2.40/pkcs11t.h</i> */
    public static final int CKM_CAST128_KEY_GEN = (int) 0x00000320;
    /** <i>native declaration : pkcs11_v2.40/pkcs11t.h</i> */
    public static final int CKM_CAST5_ECB = (int) 0x00000321;
    /** <i>native declaration : pkcs11_v2.40/pkcs11t.h</i> */
    public static final int CKM_CAST128_ECB = (int) 0x00000321;
    /** <i>native declaration : pkcs11_v2.40/pkcs11t.h</i> */
    public static final int CKM_CAST5_CBC = (int) 0x00000322;
    /** <i>native declaration : pkcs11_v2.40/pkcs11t.h</i> */
    public static final int CKM_CAST128_CBC = (int) 0x00000322;
    /** <i>native declaration : pkcs11_v2.40/pkcs11t.h</i> */
    public static final int CKM_CAST5_MAC = (int) 0x00000323;
    /** <i>native declaration : pkcs11_v2.40/pkcs11t.h</i> */
    public static final int CKM_CAST128_MAC = (int) 0x00000323;
    /** <i>native declaration : pkcs11_v2.40/pkcs11t.h</i> */
    public static final int CKM_CAST5_MAC_GENERAL = (int) 0x00000324;
    /** <i>native declaration : pkcs11_v2.40/pkcs11t.h</i> */
    public static final int CKM_CAST128_MAC_GENERAL = (int) 0x00000324;
    /** <i>native declaration : pkcs11_v2.40/pkcs11t.h</i> */
    public static final int CKM_CAST5_CBC_PAD = (int) 0x00000325;
    /** <i>native declaration : pkcs11_v2.40/pkcs11t.h</i> */
    public static final int CKM_CAST128_CBC_PAD = (int) 0x00000325;
    /** <i>native declaration : pkcs11_v2.40/pkcs11t.h</i> */
    public static final int CKM_RC5_KEY_GEN = (int) 0x00000330;
    /** <i>native declaration : pkcs11_v2.40/pkcs11t.h</i> */
    public static final int CKM_RC5_ECB = (int) 0x00000331;
    /** <i>native declaration : pkcs11_v2.40/pkcs11t.h</i> */
    public static final int CKM_RC5_CBC = (int) 0x00000332;
    /** <i>native declaration : pkcs11_v2.40/pkcs11t.h</i> */
    public static final int CKM_RC5_MAC = (int) 0x00000333;
    /** <i>native declaration : pkcs11_v2.40/pkcs11t.h</i> */
    public static final int CKM_RC5_MAC_GENERAL = (int) 0x00000334;
    /** <i>native declaration : pkcs11_v2.40/pkcs11t.h</i> */
    public static final int CKM_RC5_CBC_PAD = (int) 0x00000335;
    /** <i>native declaration : pkcs11_v2.40/pkcs11t.h</i> */
    public static final int CKM_IDEA_KEY_GEN = (int) 0x00000340;
    /** <i>native declaration : pkcs11_v2.40/pkcs11t.h</i> */
    public static final int CKM_IDEA_ECB = (int) 0x00000341;
    /** <i>native declaration : pkcs11_v2.40/pkcs11t.h</i> */
    public static final int CKM_IDEA_CBC = (int) 0x00000342;
    /** <i>native declaration : pkcs11_v2.40/pkcs11t.h</i> */
    public static final int CKM_IDEA_MAC = (int) 0x00000343;
    /** <i>native declaration : pkcs11_v2.40/pkcs11t.h</i> */
    public static final int CKM_IDEA_MAC_GENERAL = (int) 0x00000344;
    /** <i>native declaration : pkcs11_v2.40/pkcs11t.h</i> */
    public static final int CKM_IDEA_CBC_PAD = (int) 0x00000345;
    /** <i>native declaration : pkcs11_v2.40/pkcs11t.h</i> */
    public static final int CKM_GENERIC_SECRET_KEY_GEN = (int) 0x00000350;
    /** <i>native declaration : pkcs11_v2.40/pkcs11t.h</i> */
    public static final int CKM_CONCATENATE_BASE_AND_KEY = (int) 0x00000360;
    /** <i>native declaration : pkcs11_v2.40/pkcs11t.h</i> */
    public static final int CKM_CONCATENATE_BASE_AND_DATA = (int) 0x00000362;
    /** <i>native declaration : pkcs11_v2.40/pkcs11t.h</i> */
    public static final int CKM_CONCATENATE_DATA_AND_BASE = (int) 0x00000363;
    /** <i>native declaration : pkcs11_v2.40/pkcs11t.h</i> */
    public static final int CKM_XOR_BASE_AND_DATA = (int) 0x00000364;
    /** <i>native declaration : pkcs11_v2.40/pkcs11t.h</i> */
    public static final int CKM_EXTRACT_KEY_FROM_KEY = (int) 0x00000365;
    /** <i>native declaration : pkcs11_v2.40/pkcs11t.h</i> */
    public static final int CKM_SSL3_PRE_MASTER_KEY_GEN = (int) 0x00000370;
    /** <i>native declaration : pkcs11_v2.40/pkcs11t.h</i> */
    public static final int CKM_SSL3_MASTER_KEY_DERIVE = (int) 0x00000371;
    /** <i>native declaration : pkcs11_v2.40/pkcs11t.h</i> */
    public static final int CKM_SSL3_KEY_AND_MAC_DERIVE = (int) 0x00000372;
    /** <i>native declaration : pkcs11_v2.40/pkcs11t.h</i> */
    public static final int CKM_SSL3_MASTER_KEY_DERIVE_DH = (int) 0x00000373;
    /** <i>native declaration : pkcs11_v2.40/pkcs11t.h</i> */
    public static final int CKM_TLS_PRE_MASTER_KEY_GEN = (int) 0x00000374;
    /** <i>native declaration : pkcs11_v2.40/pkcs11t.h</i> */
    public static final int CKM_TLS_MASTER_KEY_DERIVE = (int) 0x00000375;
    /** <i>native declaration : pkcs11_v2.40/pkcs11t.h</i> */
    public static final int CKM_TLS_KEY_AND_MAC_DERIVE = (int) 0x00000376;
    /** <i>native declaration : pkcs11_v2.40/pkcs11t.h</i> */
    public static final int CKM_TLS_MASTER_KEY_DERIVE_DH = (int) 0x00000377;
    /** <i>native declaration : pkcs11_v2.40/pkcs11t.h</i> */
    public static final int CKM_TLS_PRF = (int) 0x00000378;
    /** <i>native declaration : pkcs11_v2.40/pkcs11t.h</i> */
    public static final int CKM_SSL3_MD5_MAC = (int) 0x00000380;
    /** <i>native declaration : pkcs11_v2.40/pkcs11t.h</i> */
    public static final int CKM_SSL3_SHA1_MAC = (int) 0x00000381;
    /** <i>native declaration : pkcs11_v2.40/pkcs11t.h</i> */
    public static final int CKM_MD5_KEY_DERIVATION = (int) 0x00000390;
    /** <i>native declaration : pkcs11_v2.40/pkcs11t.h</i> */
    public static final int CKM_MD2_KEY_DERIVATION = (int) 0x00000391;
    /** <i>native declaration : pkcs11_v2.40/pkcs11t.h</i> */
    public static final int CKM_SHA1_KEY_DERIVATION = (int) 0x00000392;
    /** <i>native declaration : pkcs11_v2.40/pkcs11t.h</i> */
    public static final int CKM_SHA256_KEY_DERIVATION = (int) 0x00000393;
    /** <i>native declaration : pkcs11_v2.40/pkcs11t.h</i> */
    public static final int CKM_SHA384_KEY_DERIVATION = (int) 0x00000394;
    /** <i>native declaration : pkcs11_v2.40/pkcs11t.h</i> */
    public static final int CKM_SHA512_KEY_DERIVATION = (int) 0x00000395;
    /** <i>native declaration : pkcs11_v2.40/pkcs11t.h</i> */
    public static final int CKM_SHA224_KEY_DERIVATION = (int) 0x00000396;
    /** <i>native declaration : pkcs11_v2.40/pkcs11t.h</i> */
    public static final int CKM_PBE_MD2_DES_CBC = (int) 0x000003A0;
    /** <i>native declaration : pkcs11_v2.40/pkcs11t.h</i> */
    public static final int CKM_PBE_MD5_DES_CBC = (int) 0x000003A1;
    /** <i>native declaration : pkcs11_v2.40/pkcs11t.h</i> */
    public static final int CKM_PBE_MD5_CAST_CBC = (int) 0x000003A2;
    /** <i>native declaration : pkcs11_v2.40/pkcs11t.h</i> */
    public static final int CKM_PBE_MD5_CAST3_CBC = (int) 0x000003A3;
    /** <i>native declaration : pkcs11_v2.40/pkcs11t.h</i> */
    public static final int CKM_PBE_MD5_CAST5_CBC = (int) 0x000003A4;
    /** <i>native declaration : pkcs11_v2.40/pkcs11t.h</i> */
    public static final int CKM_PBE_MD5_CAST128_CBC = (int) 0x000003A4;
    /** <i>native declaration : pkcs11_v2.40/pkcs11t.h</i> */
    public static final int CKM_PBE_SHA1_CAST5_CBC = (int) 0x000003A5;
    /** <i>native declaration : pkcs11_v2.40/pkcs11t.h</i> */
    public static final int CKM_PBE_SHA1_CAST128_CBC = (int) 0x000003A5;
    /** <i>native declaration : pkcs11_v2.40/pkcs11t.h</i> */
    public static final int CKM_PBE_SHA1_RC4_128 = (int) 0x000003A6;
    /** <i>native declaration : pkcs11_v2.40/pkcs11t.h</i> */
    public static final int CKM_PBE_SHA1_RC4_40 = (int) 0x000003A7;
    /** <i>native declaration : pkcs11_v2.40/pkcs11t.h</i> */
    public static final int CKM_PBE_SHA1_DES3_EDE_CBC = (int) 0x000003A8;
    /** <i>native declaration : pkcs11_v2.40/pkcs11t.h</i> */
    public static final int CKM_PBE_SHA1_DES2_EDE_CBC = (int) 0x000003A9;
    /** <i>native declaration : pkcs11_v2.40/pkcs11t.h</i> */
    public static final int CKM_PBE_SHA1_RC2_128_CBC = (int) 0x000003AA;
    /** <i>native declaration : pkcs11_v2.40/pkcs11t.h</i> */
    public static final int CKM_PBE_SHA1_RC2_40_CBC = (int) 0x000003AB;
    /** <i>native declaration : pkcs11_v2.40/pkcs11t.h</i> */
    public static final int CKM_PKCS5_PBKD2 = (int) 0x000003B0;
    /** <i>native declaration : pkcs11_v2.40/pkcs11t.h</i> */
    public static final int CKM_PBA_SHA1_WITH_SHA1_HMAC = (int) 0x000003C0;
    /** <i>native declaration : pkcs11_v2.40/pkcs11t.h</i> */
    public static final int CKM_WTLS_PRE_MASTER_KEY_GEN = (int) 0x000003D0;
    /** <i>native declaration : pkcs11_v2.40/pkcs11t.h</i> */
    public static final int CKM_WTLS_MASTER_KEY_DERIVE = (int) 0x000003D1;
    /** <i>native declaration : pkcs11_v2.40/pkcs11t.h</i> */
    public static final int CKM_WTLS_MASTER_KEY_DERIVE_DH_ECC = (int) 0x000003D2;
    /** <i>native declaration : pkcs11_v2.40/pkcs11t.h</i> */
    public static final int CKM_WTLS_PRF = (int) 0x000003D3;
    /** <i>native declaration : pkcs11_v2.40/pkcs11t.h</i> */
    public static final int CKM_WTLS_SERVER_KEY_AND_MAC_DERIVE = (int) 0x000003D4;
    /** <i>native declaration : pkcs11_v2.40/pkcs11t.h</i> */
    public static final int CKM_WTLS_CLIENT_KEY_AND_MAC_DERIVE = (int) 0x000003D5;
    /** <i>native declaration : pkcs11_v2.40/pkcs11t.h</i> */
    public static final int CKM_TLS10_MAC_SERVER = (int) 0x000003D6;
    /** <i>native declaration : pkcs11_v2.40/pkcs11t.h</i> */
    public static final int CKM_TLS10_MAC_CLIENT = (int) 0x000003D7;
    /** <i>native declaration : pkcs11_v2.40/pkcs11t.h</i> */
    public static final int CKM_TLS12_MAC = (int) 0x000003D8;
    /** <i>native declaration : pkcs11_v2.40/pkcs11t.h</i> */
    public static final int CKM_TLS12_KDF = (int) 0x000003D9;
    /** <i>native declaration : pkcs11_v2.40/pkcs11t.h</i> */
    public static final int CKM_TLS12_MASTER_KEY_DERIVE = (int) 0x000003E0;
    /** <i>native declaration : pkcs11_v2.40/pkcs11t.h</i> */
    public static final int CKM_TLS12_KEY_AND_MAC_DERIVE = (int) 0x000003E1;
    /** <i>native declaration : pkcs11_v2.40/pkcs11t.h</i> */
    public static final int CKM_TLS12_MASTER_KEY_DERIVE_DH = (int) 0x000003E2;
    /** <i>native declaration : pkcs11_v2.40/pkcs11t.h</i> */
    public static final int CKM_TLS12_KEY_SAFE_DERIVE = (int) 0x000003E3;
    /** <i>native declaration : pkcs11_v2.40/pkcs11t.h</i> */
    public static final int CKM_TLS_MAC = (int) 0x000003E4;
    /** <i>native declaration : pkcs11_v2.40/pkcs11t.h</i> */
    public static final int CKM_TLS_KDF = (int) 0x000003E5;
    /** <i>native declaration : pkcs11_v2.40/pkcs11t.h</i> */
    public static final int CKM_KEY_WRAP_LYNKS = (int) 0x00000400;
    /** <i>native declaration : pkcs11_v2.40/pkcs11t.h</i> */
    public static final int CKM_KEY_WRAP_SET_OAEP = (int) 0x00000401;
    /** <i>native declaration : pkcs11_v2.40/pkcs11t.h</i> */
    public static final int CKM_CMS_SIG = (int) 0x00000500;
    /** <i>native declaration : pkcs11_v2.40/pkcs11t.h</i> */
    public static final int CKM_KIP_DERIVE = (int) 0x00000510;
    /** <i>native declaration : pkcs11_v2.40/pkcs11t.h</i> */
    public static final int CKM_KIP_WRAP = (int) 0x00000511;
    /** <i>native declaration : pkcs11_v2.40/pkcs11t.h</i> */
    public static final int CKM_KIP_MAC = (int) 0x00000512;
    /** <i>native declaration : pkcs11_v2.40/pkcs11t.h</i> */
    public static final int CKM_CAMELLIA_KEY_GEN = (int) 0x00000550;
    /** <i>native declaration : pkcs11_v2.40/pkcs11t.h</i> */
    public static final int CKM_CAMELLIA_ECB = (int) 0x00000551;
    /** <i>native declaration : pkcs11_v2.40/pkcs11t.h</i> */
    public static final int CKM_CAMELLIA_CBC = (int) 0x00000552;
    /** <i>native declaration : pkcs11_v2.40/pkcs11t.h</i> */
    public static final int CKM_CAMELLIA_MAC = (int) 0x00000553;
    /** <i>native declaration : pkcs11_v2.40/pkcs11t.h</i> */
    public static final int CKM_CAMELLIA_MAC_GENERAL = (int) 0x00000554;
    /** <i>native declaration : pkcs11_v2.40/pkcs11t.h</i> */
    public static final int CKM_CAMELLIA_CBC_PAD = (int) 0x00000555;
    /** <i>native declaration : pkcs11_v2.40/pkcs11t.h</i> */
    public static final int CKM_CAMELLIA_ECB_ENCRYPT_DATA = (int) 0x00000556;
    /** <i>native declaration : pkcs11_v2.40/pkcs11t.h</i> */
    public static final int CKM_CAMELLIA_CBC_ENCRYPT_DATA = (int) 0x00000557;
    /** <i>native declaration : pkcs11_v2.40/pkcs11t.h</i> */
    public static final int CKM_CAMELLIA_CTR = (int) 0x00000558;
    /** <i>native declaration : pkcs11_v2.40/pkcs11t.h</i> */
    public static final int CKM_ARIA_KEY_GEN = (int) 0x00000560;
    /** <i>native declaration : pkcs11_v2.40/pkcs11t.h</i> */
    public static final int CKM_ARIA_ECB = (int) 0x00000561;
    /** <i>native declaration : pkcs11_v2.40/pkcs11t.h</i> */
    public static final int CKM_ARIA_CBC = (int) 0x00000562;
    /** <i>native declaration : pkcs11_v2.40/pkcs11t.h</i> */
    public static final int CKM_ARIA_MAC = (int) 0x00000563;
    /** <i>native declaration : pkcs11_v2.40/pkcs11t.h</i> */
    public static final int CKM_ARIA_MAC_GENERAL = (int) 0x00000564;
    /** <i>native declaration : pkcs11_v2.40/pkcs11t.h</i> */
    public static final int CKM_ARIA_CBC_PAD = (int) 0x00000565;
    /** <i>native declaration : pkcs11_v2.40/pkcs11t.h</i> */
    public static final int CKM_ARIA_ECB_ENCRYPT_DATA = (int) 0x00000566;
    /** <i>native declaration : pkcs11_v2.40/pkcs11t.h</i> */
    public static final int CKM_ARIA_CBC_ENCRYPT_DATA = (int) 0x00000567;
    /** <i>native declaration : pkcs11_v2.40/pkcs11t.h</i> */
    public static final int CKM_SEED_KEY_GEN = (int) 0x00000650;
    /** <i>native declaration : pkcs11_v2.40/pkcs11t.h</i> */
    public static final int CKM_SEED_ECB = (int) 0x00000651;
    /** <i>native declaration : pkcs11_v2.40/pkcs11t.h</i> */
    public static final int CKM_SEED_CBC = (int) 0x00000652;
    /** <i>native declaration : pkcs11_v2.40/pkcs11t.h</i> */
    public static final int CKM_SEED_MAC = (int) 0x00000653;
    /** <i>native declaration : pkcs11_v2.40/pkcs11t.h</i> */
    public static final int CKM_SEED_MAC_GENERAL = (int) 0x00000654;
    /** <i>native declaration : pkcs11_v2.40/pkcs11t.h</i> */
    public static final int CKM_SEED_CBC_PAD = (int) 0x00000655;
    /** <i>native declaration : pkcs11_v2.40/pkcs11t.h</i> */
    public static final int CKM_SEED_ECB_ENCRYPT_DATA = (int) 0x00000656;
    /** <i>native declaration : pkcs11_v2.40/pkcs11t.h</i> */
    public static final int CKM_SEED_CBC_ENCRYPT_DATA = (int) 0x00000657;
    /** <i>native declaration : pkcs11_v2.40/pkcs11t.h</i> */
    public static final int CKM_SKIPJACK_KEY_GEN = (int) 0x00001000;
    /** <i>native declaration : pkcs11_v2.40/pkcs11t.h</i> */
    public static final int CKM_SKIPJACK_ECB64 = (int) 0x00001001;
    /** <i>native declaration : pkcs11_v2.40/pkcs11t.h</i> */
    public static final int CKM_SKIPJACK_CBC64 = (int) 0x00001002;
    /** <i>native declaration : pkcs11_v2.40/pkcs11t.h</i> */
    public static final int CKM_SKIPJACK_OFB64 = (int) 0x00001003;
    /** <i>native declaration : pkcs11_v2.40/pkcs11t.h</i> */
    public static final int CKM_SKIPJACK_CFB64 = (int) 0x00001004;
    /** <i>native declaration : pkcs11_v2.40/pkcs11t.h</i> */
    public static final int CKM_SKIPJACK_CFB32 = (int) 0x00001005;
    /** <i>native declaration : pkcs11_v2.40/pkcs11t.h</i> */
    public static final int CKM_SKIPJACK_CFB16 = (int) 0x00001006;
    /** <i>native declaration : pkcs11_v2.40/pkcs11t.h</i> */
    public static final int CKM_SKIPJACK_CFB8 = (int) 0x00001007;
    /** <i>native declaration : pkcs11_v2.40/pkcs11t.h</i> */
    public static final int CKM_SKIPJACK_WRAP = (int) 0x00001008;
    /** <i>native declaration : pkcs11_v2.40/pkcs11t.h</i> */
    public static final int CKM_SKIPJACK_PRIVATE_WRAP = (int) 0x00001009;
    /** <i>native declaration : pkcs11_v2.40/pkcs11t.h</i> */
    public static final int CKM_SKIPJACK_RELAYX = (int) 0x0000100a;
    /** <i>native declaration : pkcs11_v2.40/pkcs11t.h</i> */
    public static final int CKM_KEA_KEY_PAIR_GEN = (int) 0x00001010;
    /** <i>native declaration : pkcs11_v2.40/pkcs11t.h</i> */
    public static final int CKM_KEA_KEY_DERIVE = (int) 0x00001011;
    /** <i>native declaration : pkcs11_v2.40/pkcs11t.h</i> */
    public static final int CKM_KEA_DERIVE = (int) 0x00001012;
    /** <i>native declaration : pkcs11_v2.40/pkcs11t.h</i> */
    public static final int CKM_FORTEZZA_TIMESTAMP = (int) 0x00001020;
    /** <i>native declaration : pkcs11_v2.40/pkcs11t.h</i> */
    public static final int CKM_BATON_KEY_GEN = (int) 0x00001030;
    /** <i>native declaration : pkcs11_v2.40/pkcs11t.h</i> */
    public static final int CKM_BATON_ECB128 = (int) 0x00001031;
    /** <i>native declaration : pkcs11_v2.40/pkcs11t.h</i> */
    public static final int CKM_BATON_ECB96 = (int) 0x00001032;
    /** <i>native declaration : pkcs11_v2.40/pkcs11t.h</i> */
    public static final int CKM_BATON_CBC128 = (int) 0x00001033;
    /** <i>native declaration : pkcs11_v2.40/pkcs11t.h</i> */
    public static final int CKM_BATON_COUNTER = (int) 0x00001034;
    /** <i>native declaration : pkcs11_v2.40/pkcs11t.h</i> */
    public static final int CKM_BATON_SHUFFLE = (int) 0x00001035;
    /** <i>native declaration : pkcs11_v2.40/pkcs11t.h</i> */
    public static final int CKM_BATON_WRAP = (int) 0x00001036;
    /** <i>native declaration : pkcs11_v2.40/pkcs11t.h</i> */
    public static final int CKM_ECDSA_KEY_PAIR_GEN = (int) 0x00001040;
    /** <i>native declaration : pkcs11_v2.40/pkcs11t.h</i> */
    public static final int CKM_EC_KEY_PAIR_GEN = (int) 0x00001040;
    /** <i>native declaration : pkcs11_v2.40/pkcs11t.h</i> */
    public static final int CKM_ECDSA = (int) 0x00001041;
    /** <i>native declaration : pkcs11_v2.40/pkcs11t.h</i> */
    public static final int CKM_ECDSA_SHA1 = (int) 0x00001042;
    /** <i>native declaration : pkcs11_v2.40/pkcs11t.h</i> */
    public static final int CKM_ECDSA_SHA224 = (int) 0x00001043;
    /** <i>native declaration : pkcs11_v2.40/pkcs11t.h</i> */
    public static final int CKM_ECDSA_SHA256 = (int) 0x00001044;
    /** <i>native declaration : pkcs11_v2.40/pkcs11t.h</i> */
    public static final int CKM_ECDSA_SHA384 = (int) 0x00001045;
    /** <i>native declaration : pkcs11_v2.40/pkcs11t.h</i> */
    public static final int CKM_ECDSA_SHA512 = (int) 0x00001046;
    /** <i>native declaration : pkcs11_v2.40/pkcs11t.h</i> */
    public static final int CKM_ECDH1_DERIVE = (int) 0x00001050;
    /** <i>native declaration : pkcs11_v2.40/pkcs11t.h</i> */
    public static final int CKM_ECDH1_COFACTOR_DERIVE = (int) 0x00001051;
    /** <i>native declaration : pkcs11_v2.40/pkcs11t.h</i> */
    public static final int CKM_ECMQV_DERIVE = (int) 0x00001052;
    /** <i>native declaration : pkcs11_v2.40/pkcs11t.h</i> */
    public static final int CKM_ECDH_AES_KEY_WRAP = (int) 0x00001053;
    /** <i>native declaration : pkcs11_v2.40/pkcs11t.h</i> */
    public static final int CKM_RSA_AES_KEY_WRAP = (int) 0x00001054;
    /** <i>native declaration : pkcs11_v2.40/pkcs11t.h</i> */
    public static final int CKM_JUNIPER_KEY_GEN = (int) 0x00001060;
    /** <i>native declaration : pkcs11_v2.40/pkcs11t.h</i> */
    public static final int CKM_JUNIPER_ECB128 = (int) 0x00001061;
    /** <i>native declaration : pkcs11_v2.40/pkcs11t.h</i> */
    public static final int CKM_JUNIPER_CBC128 = (int) 0x00001062;
    /** <i>native declaration : pkcs11_v2.40/pkcs11t.h</i> */
    public static final int CKM_JUNIPER_COUNTER = (int) 0x00001063;
    /** <i>native declaration : pkcs11_v2.40/pkcs11t.h</i> */
    public static final int CKM_JUNIPER_SHUFFLE = (int) 0x00001064;
    /** <i>native declaration : pkcs11_v2.40/pkcs11t.h</i> */
    public static final int CKM_JUNIPER_WRAP = (int) 0x00001065;
    /** <i>native declaration : pkcs11_v2.40/pkcs11t.h</i> */
    public static final int CKM_FASTHASH = (int) 0x00001070;
    /** <i>native declaration : pkcs11_v2.40/pkcs11t.h</i> */
    public static final int CKM_AES_KEY_GEN = (int) 0x00001080;
    /** <i>native declaration : pkcs11_v2.40/pkcs11t.h</i> */
    public static final int CKM_AES_ECB = (int) 0x00001081;
    /** <i>native declaration : pkcs11_v2.40/pkcs11t.h</i> */
    public static final int CKM_AES_CBC = (int) 0x00001082;
    /** <i>native declaration : pkcs11_v2.40/pkcs11t.h</i> */
    public static final int CKM_AES_MAC = (int) 0x00001083;
    /** <i>native declaration : pkcs11_v2.40/pkcs11t.h</i> */
    public static final int CKM_AES_MAC_GENERAL = (int) 0x00001084;
    /** <i>native declaration : pkcs11_v2.40/pkcs11t.h</i> */
    public static final int CKM_AES_CBC_PAD = (int) 0x00001085;
    /** <i>native declaration : pkcs11_v2.40/pkcs11t.h</i> */
    public static final int CKM_AES_CTR = (int) 0x00001086;
    /** <i>native declaration : pkcs11_v2.40/pkcs11t.h</i> */
    public static final int CKM_AES_GCM = (int) 0x00001087;
    /** <i>native declaration : pkcs11_v2.40/pkcs11t.h</i> */
    public static final int CKM_AES_CCM = (int) 0x00001088;
    /** <i>native declaration : pkcs11_v2.40/pkcs11t.h</i> */
    public static final int CKM_AES_CTS = (int) 0x00001089;
    /** <i>native declaration : pkcs11_v2.40/pkcs11t.h</i> */
    public static final int CKM_AES_CMAC = (int) 0x0000108A;
    /** <i>native declaration : pkcs11_v2.40/pkcs11t.h</i> */
    public static final int CKM_AES_CMAC_GENERAL = (int) 0x0000108B;
    /** <i>native declaration : pkcs11_v2.40/pkcs11t.h</i> */
    public static final int CKM_AES_XCBC_MAC = (int) 0x0000108C;
    /** <i>native declaration : pkcs11_v2.40/pkcs11t.h</i> */
    public static final int CKM_AES_XCBC_MAC_96 = (int) 0x0000108D;
    /** <i>native declaration : pkcs11_v2.40/pkcs11t.h</i> */
    public static final int CKM_AES_GMAC = (int) 0x0000108E;
    /** <i>native declaration : pkcs11_v2.40/pkcs11t.h</i> */
    public static final int CKM_BLOWFISH_KEY_GEN = (int) 0x00001090;
    /** <i>native declaration : pkcs11_v2.40/pkcs11t.h</i> */
    public static final int CKM_BLOWFISH_CBC = (int) 0x00001091;
    /** <i>native declaration : pkcs11_v2.40/pkcs11t.h</i> */
    public static final int CKM_TWOFISH_KEY_GEN = (int) 0x00001092;
    /** <i>native declaration : pkcs11_v2.40/pkcs11t.h</i> */
    public static final int CKM_TWOFISH_CBC = (int) 0x00001093;
    /** <i>native declaration : pkcs11_v2.40/pkcs11t.h</i> */
    public static final int CKM_BLOWFISH_CBC_PAD = (int) 0x00001094;
    /** <i>native declaration : pkcs11_v2.40/pkcs11t.h</i> */
    public static final int CKM_TWOFISH_CBC_PAD = (int) 0x00001095;
    /** <i>native declaration : pkcs11_v2.40/pkcs11t.h</i> */
    public static final int CKM_DES_ECB_ENCRYPT_DATA = (int) 0x00001100;
    /** <i>native declaration : pkcs11_v2.40/pkcs11t.h</i> */
    public static final int CKM_DES_CBC_ENCRYPT_DATA = (int) 0x00001101;
    /** <i>native declaration : pkcs11_v2.40/pkcs11t.h</i> */
    public static final int CKM_DES3_ECB_ENCRYPT_DATA = (int) 0x00001102;
    /** <i>native declaration : pkcs11_v2.40/pkcs11t.h</i> */
    public static final int CKM_DES3_CBC_ENCRYPT_DATA = (int) 0x00001103;
    /** <i>native declaration : pkcs11_v2.40/pkcs11t.h</i> */
    public static final int CKM_AES_ECB_ENCRYPT_DATA = (int) 0x00001104;
    /** <i>native declaration : pkcs11_v2.40/pkcs11t.h</i> */
    public static final int CKM_AES_CBC_ENCRYPT_DATA = (int) 0x00001105;
    /** <i>native declaration : pkcs11_v2.40/pkcs11t.h</i> */
    public static final int CKM_GOSTR3410_KEY_PAIR_GEN = (int) 0x00001200;
    /** <i>native declaration : pkcs11_v2.40/pkcs11t.h</i> */
    public static final int CKM_GOSTR3410 = (int) 0x00001201;
    /** <i>native declaration : pkcs11_v2.40/pkcs11t.h</i> */
    public static final int CKM_GOSTR3410_WITH_GOSTR3411 = (int) 0x00001202;
    /** <i>native declaration : pkcs11_v2.40/pkcs11t.h</i> */
    public static final int CKM_GOSTR3410_KEY_WRAP = (int) 0x00001203;
    /** <i>native declaration : pkcs11_v2.40/pkcs11t.h</i> */
    public static final int CKM_GOSTR3410_DERIVE = (int) 0x00001204;
    /** <i>native declaration : pkcs11_v2.40/pkcs11t.h</i> */
    public static final int CKM_GOSTR3411 = (int) 0x00001210;
    /** <i>native declaration : pkcs11_v2.40/pkcs11t.h</i> */
    public static final int CKM_GOSTR3411_HMAC = (int) 0x00001211;
    /** <i>native declaration : pkcs11_v2.40/pkcs11t.h</i> */
    public static final int CKM_GOST28147_KEY_GEN = (int) 0x00001220;
    /** <i>native declaration : pkcs11_v2.40/pkcs11t.h</i> */
    public static final int CKM_GOST28147_ECB = (int) 0x00001221;
    /** <i>native declaration : pkcs11_v2.40/pkcs11t.h</i> */
    public static final int CKM_GOST28147 = (int) 0x00001222;
    /** <i>native declaration : pkcs11_v2.40/pkcs11t.h</i> */
    public static final int CKM_GOST28147_MAC = (int) 0x00001223;
    /** <i>native declaration : pkcs11_v2.40/pkcs11t.h</i> */
    public static final int CKM_GOST28147_KEY_WRAP = (int) 0x00001224;
    /** <i>native declaration : pkcs11_v2.40/pkcs11t.h</i> */
    public static final int CKM_DSA_PARAMETER_GEN = (int) 0x00002000;
    /** <i>native declaration : pkcs11_v2.40/pkcs11t.h</i> */
    public static final int CKM_DH_PKCS_PARAMETER_GEN = (int) 0x00002001;
    /** <i>native declaration : pkcs11_v2.40/pkcs11t.h</i> */
    public static final int CKM_X9_42_DH_PARAMETER_GEN = (int) 0x00002002;
    /** <i>native declaration : pkcs11_v2.40/pkcs11t.h</i> */
    public static final int CKM_DSA_PROBABLISTIC_PARAMETER_GEN = (int) 0x00002003;
    /** <i>native declaration : pkcs11_v2.40/pkcs11t.h</i> */
    public static final int CKM_DSA_SHAWE_TAYLOR_PARAMETER_GEN = (int) 0x00002004;
    /** <i>native declaration : pkcs11_v2.40/pkcs11t.h</i> */
    public static final int CKM_AES_OFB = (int) 0x00002104;
    /** <i>native declaration : pkcs11_v2.40/pkcs11t.h</i> */
    public static final int CKM_AES_CFB64 = (int) 0x00002105;
    /** <i>native declaration : pkcs11_v2.40/pkcs11t.h</i> */
    public static final int CKM_AES_CFB8 = (int) 0x00002106;
    /** <i>native declaration : pkcs11_v2.40/pkcs11t.h</i> */
    public static final int CKM_AES_CFB128 = (int) 0x00002107;
    /** <i>native declaration : pkcs11_v2.40/pkcs11t.h</i> */
    public static final int CKM_AES_CFB1 = (int) 0x00002108;
    /** <i>native declaration : pkcs11_v2.40/pkcs11t.h</i> */
    public static final int CKM_AES_KEY_WRAP = (int) 0x00002109;
    /** <i>native declaration : pkcs11_v2.40/pkcs11t.h</i> */
    public static final int CKM_AES_KEY_WRAP_PAD = (int) 0x0000210A;
    /** <i>native declaration : pkcs11_v2.40/pkcs11t.h</i> */
    public static final int CKM_RSA_PKCS_TPM_1_1 = (int) 0x00004001;
    /** <i>native declaration : pkcs11_v2.40/pkcs11t.h</i> */
    public static final int CKM_RSA_PKCS_OAEP_TPM_1_1 = (int) 0x00004002;
    /** <i>native declaration : pkcs11_v2.40/pkcs11t.h</i> */
    public static final int CKM_VENDOR_DEFINED = (int) 0x80000000;
    /** <i>native declaration : pkcs11_v2.40/pkcs11t.h</i> */
    public static final int CKF_HW = (int) 0x00000001;
    /** <i>native declaration : pkcs11_v2.40/pkcs11t.h</i> */
    public static final int CKF_ENCRYPT = (int) 0x00000100;
    /** <i>native declaration : pkcs11_v2.40/pkcs11t.h</i> */
    public static final int CKF_DECRYPT = (int) 0x00000200;
    /** <i>native declaration : pkcs11_v2.40/pkcs11t.h</i> */
    public static final int CKF_DIGEST = (int) 0x00000400;
    /** <i>native declaration : pkcs11_v2.40/pkcs11t.h</i> */
    public static final int CKF_SIGN = (int) 0x00000800;
    /** <i>native declaration : pkcs11_v2.40/pkcs11t.h</i> */
    public static final int CKF_SIGN_RECOVER = (int) 0x00001000;
    /** <i>native declaration : pkcs11_v2.40/pkcs11t.h</i> */
    public static final int CKF_VERIFY = (int) 0x00002000;
    /** <i>native declaration : pkcs11_v2.40/pkcs11t.h</i> */
    public static final int CKF_VERIFY_RECOVER = (int) 0x00004000;
    /** <i>native declaration : pkcs11_v2.40/pkcs11t.h</i> */
    public static final int CKF_GENERATE = (int) 0x00008000;
    /** <i>native declaration : pkcs11_v2.40/pkcs11t.h</i> */
    public static final int CKF_GENERATE_KEY_PAIR = (int) 0x00010000;
    /** <i>native declaration : pkcs11_v2.40/pkcs11t.h</i> */
    public static final int CKF_WRAP = (int) 0x00020000;
    /** <i>native declaration : pkcs11_v2.40/pkcs11t.h</i> */
    public static final int CKF_UNWRAP = (int) 0x00040000;
    /** <i>native declaration : pkcs11_v2.40/pkcs11t.h</i> */
    public static final int CKF_DERIVE = (int) 0x00080000;
    /** <i>native declaration : pkcs11_v2.40/pkcs11t.h</i> */
    public static final int CKF_EC_F_P = (int) 0x00100000;
    /** <i>native declaration : pkcs11_v2.40/pkcs11t.h</i> */
    public static final int CKF_EC_F_2M = (int) 0x00200000;
    /** <i>native declaration : pkcs11_v2.40/pkcs11t.h</i> */
    public static final int CKF_EC_ECPARAMETERS = (int) 0x00400000;
    /** <i>native declaration : pkcs11_v2.40/pkcs11t.h</i> */
    public static final int CKF_EC_NAMEDCURVE = (int) 0x00800000;
    /** <i>native declaration : pkcs11_v2.40/pkcs11t.h</i> */
    public static final int CKF_EC_UNCOMPRESS = (int) 0x01000000;
    /** <i>native declaration : pkcs11_v2.40/pkcs11t.h</i> */
    public static final int CKF_EC_COMPRESS = (int) 0x02000000;
    /** <i>native declaration : pkcs11_v2.40/pkcs11t.h</i> */
    public static final int CKF_EXTENSION = (int) 0x80000000;
    /** <i>native declaration : pkcs11_v2.40/pkcs11t.h</i> */
    public static final int CKR_OK = (int) 0x00000000;
    /** <i>native declaration : pkcs11_v2.40/pkcs11t.h</i> */
    public static final int CKR_CANCEL = (int) 0x00000001;
    /** <i>native declaration : pkcs11_v2.40/pkcs11t.h</i> */
    public static final int CKR_HOST_MEMORY = (int) 0x00000002;
    /** <i>native declaration : pkcs11_v2.40/pkcs11t.h</i> */
    public static final int CKR_SLOT_ID_INVALID = (int) 0x00000003;
    /** <i>native declaration : pkcs11_v2.40/pkcs11t.h</i> */
    public static final int CKR_GENERAL_ERROR = (int) 0x00000005;
    /** <i>native declaration : pkcs11_v2.40/pkcs11t.h</i> */
    public static final int CKR_FUNCTION_FAILED = (int) 0x00000006;
    /** <i>native declaration : pkcs11_v2.40/pkcs11t.h</i> */
    public static final int CKR_ARGUMENTS_BAD = (int) 0x00000007;
    /** <i>native declaration : pkcs11_v2.40/pkcs11t.h</i> */
    public static final int CKR_NO_EVENT = (int) 0x00000008;
    /** <i>native declaration : pkcs11_v2.40/pkcs11t.h</i> */
    public static final int CKR_NEED_TO_CREATE_THREADS = (int) 0x00000009;
    /** <i>native declaration : pkcs11_v2.40/pkcs11t.h</i> */
    public static final int CKR_CANT_LOCK = (int) 0x0000000A;
    /** <i>native declaration : pkcs11_v2.40/pkcs11t.h</i> */
    public static final int CKR_ATTRIBUTE_READ_ONLY = (int) 0x00000010;
    /** <i>native declaration : pkcs11_v2.40/pkcs11t.h</i> */
    public static final int CKR_ATTRIBUTE_SENSITIVE = (int) 0x00000011;
    /** <i>native declaration : pkcs11_v2.40/pkcs11t.h</i> */
    public static final int CKR_ATTRIBUTE_TYPE_INVALID = (int) 0x00000012;
    /** <i>native declaration : pkcs11_v2.40/pkcs11t.h</i> */
    public static final int CKR_ATTRIBUTE_VALUE_INVALID = (int) 0x00000013;
    /** <i>native declaration : pkcs11_v2.40/pkcs11t.h</i> */
    public static final int CKR_ACTION_PROHIBITED = (int) 0x0000001B;
    /** <i>native declaration : pkcs11_v2.40/pkcs11t.h</i> */
    public static final int CKR_DATA_INVALID = (int) 0x00000020;
    /** <i>native declaration : pkcs11_v2.40/pkcs11t.h</i> */
    public static final int CKR_DATA_LEN_RANGE = (int) 0x00000021;
    /** <i>native declaration : pkcs11_v2.40/pkcs11t.h</i> */
    public static final int CKR_DEVICE_ERROR = (int) 0x00000030;
    /** <i>native declaration : pkcs11_v2.40/pkcs11t.h</i> */
    public static final int CKR_DEVICE_MEMORY = (int) 0x00000031;
    /** <i>native declaration : pkcs11_v2.40/pkcs11t.h</i> */
    public static final int CKR_DEVICE_REMOVED = (int) 0x00000032;
    /** <i>native declaration : pkcs11_v2.40/pkcs11t.h</i> */
    public static final int CKR_ENCRYPTED_DATA_INVALID = (int) 0x00000040;
    /** <i>native declaration : pkcs11_v2.40/pkcs11t.h</i> */
    public static final int CKR_ENCRYPTED_DATA_LEN_RANGE = (int) 0x00000041;
    /** <i>native declaration : pkcs11_v2.40/pkcs11t.h</i> */
    public static final int CKR_FUNCTION_CANCELED = (int) 0x00000050;
    /** <i>native declaration : pkcs11_v2.40/pkcs11t.h</i> */
    public static final int CKR_FUNCTION_NOT_PARALLEL = (int) 0x00000051;
    /** <i>native declaration : pkcs11_v2.40/pkcs11t.h</i> */
    public static final int CKR_FUNCTION_NOT_SUPPORTED = (int) 0x00000054;
    /** <i>native declaration : pkcs11_v2.40/pkcs11t.h</i> */
    public static final int CKR_KEY_HANDLE_INVALID = (int) 0x00000060;
    /** <i>native declaration : pkcs11_v2.40/pkcs11t.h</i> */
    public static final int CKR_KEY_SIZE_RANGE = (int) 0x00000062;
    /** <i>native declaration : pkcs11_v2.40/pkcs11t.h</i> */
    public static final int CKR_KEY_TYPE_INCONSISTENT = (int) 0x00000063;
    /** <i>native declaration : pkcs11_v2.40/pkcs11t.h</i> */
    public static final int CKR_KEY_NOT_NEEDED = (int) 0x00000064;
    /** <i>native declaration : pkcs11_v2.40/pkcs11t.h</i> */
    public static final int CKR_KEY_CHANGED = (int) 0x00000065;
    /** <i>native declaration : pkcs11_v2.40/pkcs11t.h</i> */
    public static final int CKR_KEY_NEEDED = (int) 0x00000066;
    /** <i>native declaration : pkcs11_v2.40/pkcs11t.h</i> */
    public static final int CKR_KEY_INDIGESTIBLE = (int) 0x00000067;
    /** <i>native declaration : pkcs11_v2.40/pkcs11t.h</i> */
    public static final int CKR_KEY_FUNCTION_NOT_PERMITTED = (int) 0x00000068;
    /** <i>native declaration : pkcs11_v2.40/pkcs11t.h</i> */
    public static final int CKR_KEY_NOT_WRAPPABLE = (int) 0x00000069;
    /** <i>native declaration : pkcs11_v2.40/pkcs11t.h</i> */
    public static final int CKR_KEY_UNEXTRACTABLE = (int) 0x0000006A;
    /** <i>native declaration : pkcs11_v2.40/pkcs11t.h</i> */
    public static final int CKR_MECHANISM_INVALID = (int) 0x00000070;
    /** <i>native declaration : pkcs11_v2.40/pkcs11t.h</i> */
    public static final int CKR_MECHANISM_PARAM_INVALID = (int) 0x00000071;
    /** <i>native declaration : pkcs11_v2.40/pkcs11t.h</i> */
    public static final int CKR_OBJECT_HANDLE_INVALID = (int) 0x00000082;
    /** <i>native declaration : pkcs11_v2.40/pkcs11t.h</i> */
    public static final int CKR_OPERATION_ACTIVE = (int) 0x00000090;
    /** <i>native declaration : pkcs11_v2.40/pkcs11t.h</i> */
    public static final int CKR_OPERATION_NOT_INITIALIZED = (int) 0x00000091;
    /** <i>native declaration : pkcs11_v2.40/pkcs11t.h</i> */
    public static final int CKR_PIN_INCORRECT = (int) 0x000000A0;
    /** <i>native declaration : pkcs11_v2.40/pkcs11t.h</i> */
    public static final int CKR_PIN_INVALID = (int) 0x000000A1;
    /** <i>native declaration : pkcs11_v2.40/pkcs11t.h</i> */
    public static final int CKR_PIN_LEN_RANGE = (int) 0x000000A2;
    /** <i>native declaration : pkcs11_v2.40/pkcs11t.h</i> */
    public static final int CKR_PIN_EXPIRED = (int) 0x000000A3;
    /** <i>native declaration : pkcs11_v2.40/pkcs11t.h</i> */
    public static final int CKR_PIN_LOCKED = (int) 0x000000A4;
    /** <i>native declaration : pkcs11_v2.40/pkcs11t.h</i> */
    public static final int CKR_SESSION_CLOSED = (int) 0x000000B0;
    /** <i>native declaration : pkcs11_v2.40/pkcs11t.h</i> */
    public static final int CKR_SESSION_COUNT = (int) 0x000000B1;
    /** <i>native declaration : pkcs11_v2.40/pkcs11t.h</i> */
    public static final int CKR_SESSION_HANDLE_INVALID = (int) 0x000000B3;
    /** <i>native declaration : pkcs11_v2.40/pkcs11t.h</i> */
    public static final int CKR_SESSION_PARALLEL_NOT_SUPPORTED = (int) 0x000000B4;
    /** <i>native declaration : pkcs11_v2.40/pkcs11t.h</i> */
    public static final int CKR_SESSION_READ_ONLY = (int) 0x000000B5;
    /** <i>native declaration : pkcs11_v2.40/pkcs11t.h</i> */
    public static final int CKR_SESSION_EXISTS = (int) 0x000000B6;
    /** <i>native declaration : pkcs11_v2.40/pkcs11t.h</i> */
    public static final int CKR_SESSION_READ_ONLY_EXISTS = (int) 0x000000B7;
    /** <i>native declaration : pkcs11_v2.40/pkcs11t.h</i> */
    public static final int CKR_SESSION_READ_WRITE_SO_EXISTS = (int) 0x000000B8;
    /** <i>native declaration : pkcs11_v2.40/pkcs11t.h</i> */
    public static final int CKR_SIGNATURE_INVALID = (int) 0x000000C0;
    /** <i>native declaration : pkcs11_v2.40/pkcs11t.h</i> */
    public static final int CKR_SIGNATURE_LEN_RANGE = (int) 0x000000C1;
    /** <i>native declaration : pkcs11_v2.40/pkcs11t.h</i> */
    public static final int CKR_TEMPLATE_INCOMPLETE = (int) 0x000000D0;
    /** <i>native declaration : pkcs11_v2.40/pkcs11t.h</i> */
    public static final int CKR_TEMPLATE_INCONSISTENT = (int) 0x000000D1;
    /** <i>native declaration : pkcs11_v2.40/pkcs11t.h</i> */
    public static final int CKR_TOKEN_NOT_PRESENT = (int) 0x000000E0;
    /** <i>native declaration : pkcs11_v2.40/pkcs11t.h</i> */
    public static final int CKR_TOKEN_NOT_RECOGNIZED = (int) 0x000000E1;
    /** <i>native declaration : pkcs11_v2.40/pkcs11t.h</i> */
    public static final int CKR_TOKEN_WRITE_PROTECTED = (int) 0x000000E2;
    /** <i>native declaration : pkcs11_v2.40/pkcs11t.h</i> */
    public static final int CKR_UNWRAPPING_KEY_HANDLE_INVALID = (int) 0x000000F0;
    /** <i>native declaration : pkcs11_v2.40/pkcs11t.h</i> */
    public static final int CKR_UNWRAPPING_KEY_SIZE_RANGE = (int) 0x000000F1;
    /** <i>native declaration : pkcs11_v2.40/pkcs11t.h</i> */
    public static final int CKR_UNWRAPPING_KEY_TYPE_INCONSISTENT = (int) 0x000000F2;
    /** <i>native declaration : pkcs11_v2.40/pkcs11t.h</i> */
    public static final int CKR_USER_ALREADY_LOGGED_IN = (int) 0x00000100;
    /** <i>native declaration : pkcs11_v2.40/pkcs11t.h</i> */
    public static final int CKR_USER_NOT_LOGGED_IN = (int) 0x00000101;
    /** <i>native declaration : pkcs11_v2.40/pkcs11t.h</i> */
    public static final int CKR_USER_PIN_NOT_INITIALIZED = (int) 0x00000102;
    /** <i>native declaration : pkcs11_v2.40/pkcs11t.h</i> */
    public static final int CKR_USER_TYPE_INVALID = (int) 0x00000103;
    /** <i>native declaration : pkcs11_v2.40/pkcs11t.h</i> */
    public static final int CKR_USER_ANOTHER_ALREADY_LOGGED_IN = (int) 0x00000104;
    /** <i>native declaration : pkcs11_v2.40/pkcs11t.h</i> */
    public static final int CKR_USER_TOO_MANY_TYPES = (int) 0x00000105;
    /** <i>native declaration : pkcs11_v2.40/pkcs11t.h</i> */
    public static final int CKR_WRAPPED_KEY_INVALID = (int) 0x00000110;
    /** <i>native declaration : pkcs11_v2.40/pkcs11t.h</i> */
    public static final int CKR_WRAPPED_KEY_LEN_RANGE = (int) 0x00000112;
    /** <i>native declaration : pkcs11_v2.40/pkcs11t.h</i> */
    public static final int CKR_WRAPPING_KEY_HANDLE_INVALID = (int) 0x00000113;
    /** <i>native declaration : pkcs11_v2.40/pkcs11t.h</i> */
    public static final int CKR_WRAPPING_KEY_SIZE_RANGE = (int) 0x00000114;
    /** <i>native declaration : pkcs11_v2.40/pkcs11t.h</i> */
    public static final int CKR_WRAPPING_KEY_TYPE_INCONSISTENT = (int) 0x00000115;
    /** <i>native declaration : pkcs11_v2.40/pkcs11t.h</i> */
    public static final int CKR_RANDOM_SEED_NOT_SUPPORTED = (int) 0x00000120;
    /** <i>native declaration : pkcs11_v2.40/pkcs11t.h</i> */
    public static final int CKR_RANDOM_NO_RNG = (int) 0x00000121;
    /** <i>native declaration : pkcs11_v2.40/pkcs11t.h</i> */
    public static final int CKR_DOMAIN_PARAMS_INVALID = (int) 0x00000130;
    /** <i>native declaration : pkcs11_v2.40/pkcs11t.h</i> */
    public static final int CKR_CURVE_NOT_SUPPORTED = (int) 0x00000140;
    /** <i>native declaration : pkcs11_v2.40/pkcs11t.h</i> */
    public static final int CKR_BUFFER_TOO_SMALL = (int) 0x00000150;
    /** <i>native declaration : pkcs11_v2.40/pkcs11t.h</i> */
    public static final int CKR_SAVED_STATE_INVALID = (int) 0x00000160;
    /** <i>native declaration : pkcs11_v2.40/pkcs11t.h</i> */
    public static final int CKR_INFORMATION_SENSITIVE = (int) 0x00000170;
    /** <i>native declaration : pkcs11_v2.40/pkcs11t.h</i> */
    public static final int CKR_STATE_UNSAVEABLE = (int) 0x00000180;
    /** <i>native declaration : pkcs11_v2.40/pkcs11t.h</i> */
    public static final int CKR_CRYPTOKI_NOT_INITIALIZED = (int) 0x00000190;
    /** <i>native declaration : pkcs11_v2.40/pkcs11t.h</i> */
    public static final int CKR_CRYPTOKI_ALREADY_INITIALIZED = (int) 0x00000191;
    /** <i>native declaration : pkcs11_v2.40/pkcs11t.h</i> */
    public static final int CKR_MUTEX_BAD = (int) 0x000001A0;
    /** <i>native declaration : pkcs11_v2.40/pkcs11t.h</i> */
    public static final int CKR_MUTEX_NOT_LOCKED = (int) 0x000001A1;
    /** <i>native declaration : pkcs11_v2.40/pkcs11t.h</i> */
    public static final int CKR_NEW_PIN_MODE = (int) 0x000001B0;
    /** <i>native declaration : pkcs11_v2.40/pkcs11t.h</i> */
    public static final int CKR_NEXT_OTP = (int) 0x000001B1;
    /** <i>native declaration : pkcs11_v2.40/pkcs11t.h</i> */
    public static final int CKR_EXCEEDED_MAX_ITERATIONS = (int) 0x000001B5;
    /** <i>native declaration : pkcs11_v2.40/pkcs11t.h</i> */
    public static final int CKR_FIPS_SELF_TEST_FAILED = (int) 0x000001B6;
    /** <i>native declaration : pkcs11_v2.40/pkcs11t.h</i> */
    public static final int CKR_LIBRARY_LOAD_FAILED = (int) 0x000001B7;
    /** <i>native declaration : pkcs11_v2.40/pkcs11t.h</i> */
    public static final int CKR_PIN_TOO_WEAK = (int) 0x000001B8;
    /** <i>native declaration : pkcs11_v2.40/pkcs11t.h</i> */
    public static final int CKR_PUBLIC_KEY_INVALID = (int) 0x000001B9;
    /** <i>native declaration : pkcs11_v2.40/pkcs11t.h</i> */
    public static final int CKR_FUNCTION_REJECTED = (int) 0x00000200;
    /** <i>native declaration : pkcs11_v2.40/pkcs11t.h</i> */
    public static final int CKR_VENDOR_DEFINED = (int) 0x80000000;
    /** <i>native declaration : pkcs11_v2.40/pkcs11t.h</i> */
    public static final int CKF_LIBRARY_CANT_CREATE_OS_THREADS = (int) 0x00000001;
    /** <i>native declaration : pkcs11_v2.40/pkcs11t.h</i> */
    public static final int CKF_OS_LOCKING_OK = (int) 0x00000002;
    /** <i>native declaration : pkcs11_v2.40/pkcs11t.h</i> */
    public static final int CKF_DONT_BLOCK = (int) 1;
    /** <i>native declaration : pkcs11_v2.40/pkcs11t.h</i> */
    public static final int CKG_MGF1_SHA1 = (int) 0x00000001;
    /** <i>native declaration : pkcs11_v2.40/pkcs11t.h</i> */
    public static final int CKG_MGF1_SHA256 = (int) 0x00000002;
    /** <i>native declaration : pkcs11_v2.40/pkcs11t.h</i> */
    public static final int CKG_MGF1_SHA384 = (int) 0x00000003;
    /** <i>native declaration : pkcs11_v2.40/pkcs11t.h</i> */
    public static final int CKG_MGF1_SHA512 = (int) 0x00000004;
    /** <i>native declaration : pkcs11_v2.40/pkcs11t.h</i> */
    public static final int CKG_MGF1_SHA224 = (int) 0x00000005;
    /** <i>native declaration : pkcs11_v2.40/pkcs11t.h</i> */
    public static final int CKZ_DATA_SPECIFIED = (int) 0x00000001;
    /** <i>native declaration : pkcs11_v2.40/pkcs11t.h</i> */
    public static final int CKD_NULL = (int) 0x00000001;
    /** <i>native declaration : pkcs11_v2.40/pkcs11t.h</i> */
    public static final int CKD_SHA1_KDF = (int) 0x00000002;
    /** <i>native declaration : pkcs11_v2.40/pkcs11t.h</i> */
    public static final int CKD_SHA1_KDF_ASN1 = (int) 0x00000003;
    /** <i>native declaration : pkcs11_v2.40/pkcs11t.h</i> */
    public static final int CKD_SHA1_KDF_CONCATENATE = (int) 0x00000004;
    /** <i>native declaration : pkcs11_v2.40/pkcs11t.h</i> */
    public static final int CKD_SHA224_KDF = (int) 0x00000005;
    /** <i>native declaration : pkcs11_v2.40/pkcs11t.h</i> */
    public static final int CKD_SHA256_KDF = (int) 0x00000006;
    /** <i>native declaration : pkcs11_v2.40/pkcs11t.h</i> */
    public static final int CKD_SHA384_KDF = (int) 0x00000007;
    /** <i>native declaration : pkcs11_v2.40/pkcs11t.h</i> */
    public static final int CKD_SHA512_KDF = (int) 0x00000008;
    /** <i>native declaration : pkcs11_v2.40/pkcs11t.h</i> */
    public static final int CKD_CPDIVERSIFY_KDF = (int) 0x00000009;
    /** <i>native declaration : pkcs11_v2.40/pkcs11t.h</i> */
    public static final int CKP_PKCS5_PBKD2_HMAC_SHA1 = (int) 0x00000001;
    /** <i>native declaration : pkcs11_v2.40/pkcs11t.h</i> */
    public static final int CKP_PKCS5_PBKD2_HMAC_GOSTR3411 = (int) 0x00000002;
    /** <i>native declaration : pkcs11_v2.40/pkcs11t.h</i> */
    public static final int CKP_PKCS5_PBKD2_HMAC_SHA224 = (int) 0x00000003;
    /** <i>native declaration : pkcs11_v2.40/pkcs11t.h</i> */
    public static final int CKP_PKCS5_PBKD2_HMAC_SHA256 = (int) 0x00000004;
    /** <i>native declaration : pkcs11_v2.40/pkcs11t.h</i> */
    public static final int CKP_PKCS5_PBKD2_HMAC_SHA384 = (int) 0x00000005;
    /** <i>native declaration : pkcs11_v2.40/pkcs11t.h</i> */
    public static final int CKP_PKCS5_PBKD2_HMAC_SHA512 = (int) 0x00000006;
    /** <i>native declaration : pkcs11_v2.40/pkcs11t.h</i> */
    public static final int CKP_PKCS5_PBKD2_HMAC_SHA512_224 = (int) 0x00000007;
    /** <i>native declaration : pkcs11_v2.40/pkcs11t.h</i> */
    public static final int CKP_PKCS5_PBKD2_HMAC_SHA512_256 = (int) 0x00000008;
    /** <i>native declaration : pkcs11_v2.40/pkcs11t.h</i> */
    public static final int CKZ_SALT_SPECIFIED = (int) 0x00000001;
    /** <i>native declaration : pkcs11_v2.40/pkcs11t.h</i> */
    public static final int CK_OTP_VALUE = (int) 0;
    /** <i>native declaration : pkcs11_v2.40/pkcs11t.h</i> */
    public static final int CK_OTP_PIN = (int) 1;
    /** <i>native declaration : pkcs11_v2.40/pkcs11t.h</i> */
    public static final int CK_OTP_CHALLENGE = (int) 2;
    /** <i>native declaration : pkcs11_v2.40/pkcs11t.h</i> */
    public static final int CK_OTP_TIME = (int) 3;
    /** <i>native declaration : pkcs11_v2.40/pkcs11t.h</i> */
    public static final int CK_OTP_COUNTER = (int) 4;
    /** <i>native declaration : pkcs11_v2.40/pkcs11t.h</i> */
    public static final int CK_OTP_FLAGS = (int) 5;
    /** <i>native declaration : pkcs11_v2.40/pkcs11t.h</i> */
    public static final int CK_OTP_OUTPUT_LENGTH = (int) 6;
    /** <i>native declaration : pkcs11_v2.40/pkcs11t.h</i> */
    public static final int CK_OTP_OUTPUT_FORMAT = (int) 7;
    /** <i>native declaration : pkcs11_v2.40/pkcs11t.h</i> */
    public static final int CKF_NEXT_OTP = (int) 0x00000001;
    /** <i>native declaration : pkcs11_v2.40/pkcs11t.h</i> */
    public static final int CKF_EXCLUDE_TIME = (int) 0x00000002;
    /** <i>native declaration : pkcs11_v2.40/pkcs11t.h</i> */
    public static final int CKF_EXCLUDE_COUNTER = (int) 0x00000004;
    /** <i>native declaration : pkcs11_v2.40/pkcs11t.h</i> */
    public static final int CKF_EXCLUDE_CHALLENGE = (int) 0x00000008;
    /** <i>native declaration : pkcs11_v2.40/pkcs11t.h</i> */
    public static final int CKF_EXCLUDE_PIN = (int) 0x00000010;
    /** <i>native declaration : pkcs11_v2.40/pkcs11t.h</i> */
    public static final int CKF_USER_FRIENDLY_OTP = (int) 0x00000020;

    /** <i>native declaration : pkcs11_v2.40/pkcs11t.h</i> */
    public interface CK_NOTIFY extends Callback {
        /**
         * @param hSession
         *            the session's handle<br>
         * @param pApplication
         *            passed to C_OpenSession
         */
        NativeLong apply(NativeLong hSession, NativeLong event, Pointer pApplication);
    };

    /** <i>native declaration : pkcs11_v2.40/pkcs11t.h</i> */
    public interface CK_CREATEMUTEX extends Callback {
        /**
         * @param ppMutex
         *            location to receive ptr to mutex
         */
        NativeLong apply(PointerByReference ppMutex);
    };

    /** <i>native declaration : pkcs11_v2.40/pkcs11t.h</i> */
    public interface CK_DESTROYMUTEX extends Callback {
        /**
         * @param pMutex
         *            pointer to mutex
         */
        NativeLong apply(Pointer pMutex);
    };

    /** <i>native declaration : pkcs11_v2.40/pkcs11t.h</i> */
    public interface CK_LOCKMUTEX extends Callback {
        /**
         * @param pMutex
         *            pointer to mutex
         */
        NativeLong apply(Pointer pMutex);
    };

    /** <i>native declaration : pkcs11_v2.40/pkcs11t.h</i> */
    public interface CK_UNLOCKMUTEX extends Callback {
        /**
         * @param pMutex
         *            pointer to mutex
         */
        NativeLong apply(Pointer pMutex);
    };

    /**
     * C_Initialize initializes the Cryptoki library.<br>
     * Original signature :
     * <code>__attribute__((dllimport)) CK_RV C_Initialize(CK_VOID_PTR)</code>
     * <br>
     *
     * @param pInitArgs
     *            if this is not NULL_PTR, it gets<br>
     *            cast to CK_C_INITIALIZE_ARGS_PTR<br>
     *            and dereferenced<br>
     *            <i>native declaration : pkcs11_v2.40/pkcs11f.h:17</i>
     */
    NativeLong C_Initialize(Pointer pInitArgs);

    /**
     * C_Finalize indicates that an application is done with the<br>
     * Cryptoki library.<br>
     * Original signature :
     * <code>__attribute__((dllimport)) CK_RV C_Finalize(CK_VOID_PTR)</code><br>
     *
     * @param pReserved
     *            reserved. Should be NULL_PTR<br>
     *            <i>native declaration : pkcs11_v2.40/pkcs11f.h:31</i>
     */
    NativeLong C_Finalize(Pointer pReserved);

    /**
     * C_GetInfo returns general information about Cryptoki.<br>
     * Original signature :
     * <code>__attribute__((dllimport)) CK_RV C_GetInfo(CK_INFO_PTR)</code><br>
     * 
     * @param pInfo
     *            location that receives information<br>
     *            <i>native declaration : pkcs11_v2.40/pkcs11f.h:40</i>
     */
    NativeLong C_GetInfo(CK_INFO pInfo);

    /**
     * C_GetFunctionList returns the function list.<br>
     * Original signature :
     * <code>__attribute__((dllimport)) CK_RV C_GetFunctionList(CK_FUNCTION_LIST_PTR_PTR)</code>
     * <br>
     * 
     * @param ppFunctionList
     *            receives pointer to<br>
     *            function list<br>
     *            <i>native declaration : pkcs11_v2.40/pkcs11f.h:49</i>
     */
    NativeLong C_GetFunctionList(PointerByReference ppFunctionList);

    /**
     * C_GetSlotList obtains a list of slots in the system.<br>
     * Original signature :
     * <code>__attribute__((dllimport)) CK_RV C_GetSlotList(CK_BBOOL, CK_SLOT_ID_PTR, CK_UNativeLong_PTR)</code>
     * <br>
     * 
     * @param tokenPresent
     *            only slots with tokens<br>
     * @param pSlotList
     *            receives array of slot IDs<br>
     * @param pulCount
     *            receives number of slots<br>
     *            <i>native declaration : pkcs11_v2.40/pkcs11f.h:63</i>
     */
    NativeLong C_GetSlotList(byte tokenPresent, Memory pSlotList, NativeLongByReference pulCount);

    /**
     * C_GetSlotInfo obtains information about a particular slot in<br>
     * the system.<br>
     * Original signature :
     * <code>__attribute__((dllimport)) CK_RV C_GetSlotInfo(CK_SLOT_ID, CK_SLOT_INFO_PTR)</code>
     * <br>
     * 
     * @param slotID
     *            the ID of the slot<br>
     * @param pInfo
     *            receives the slot information<br>
     *            <i>native declaration : pkcs11_v2.40/pkcs11f.h:76</i>
     */
    NativeLong C_GetSlotInfo(NativeLong slotID, CK_SLOT_INFO pInfo);

    /**
     * C_GetTokenInfo obtains information about a particular token<br>
     * in the system.<br>
     * Original signature :
     * <code>__attribute__((dllimport)) CK_RV C_GetTokenInfo(CK_SLOT_ID, CK_TOKEN_INFO_PTR)</code>
     * <br>
     * 
     * @param slotID
     *            ID of the token's slot<br>
     * @param pInfo
     *            receives the token information<br>
     *            <i>native declaration : pkcs11_v2.40/pkcs11f.h:88</i>
     */
    NativeLong C_GetTokenInfo(NativeLong slotID, CK_TOKEN_INFO pInfo);

    /**
     * C_GetMechanismList obtains a list of mechanism types<br>
     * supported by a token.<br>
     * Original signature :
     * <code>__attribute__((dllimport)) CK_RV C_GetMechanismList(CK_SLOT_ID, CK_MECHANISM_TYPE_PTR, CK_UNativeLong_PTR)</code>
     * <br>
     * 
     * @param slotID
     *            ID of token's slot<br>
     * @param pMechanismList
     *            gets mech. array<br>
     * @param pulCount
     *            gets # of mechs.<br>
     *            <i>native declaration : pkcs11_v2.40/pkcs11f.h:100</i>
     */
    NativeLong C_GetMechanismList(NativeLong slotID, Memory pMechanismList, NativeLongByReference pulCount);

    /**
     * C_GetMechanismInfo obtains information about a particular<br>
     * mechanism possibly supported by a token.<br>
     * Original signature :
     * <code>__attribute__((dllimport)) CK_RV C_GetMechanismInfo(CK_SLOT_ID, CK_MECHANISM_TYPE, CK_MECHANISM_INFO_PTR)</code>
     * <br>
     * 
     * @param slotID
     *            ID of the token's slot<br>
     * @param type
     *            type of mechanism<br>
     * @param pInfo
     *            receives mechanism info<br>
     *            <i>native declaration : pkcs11_v2.40/pkcs11f.h:113</i>
     */
    NativeLong C_GetMechanismInfo(NativeLong slotID, NativeLong type, CK_MECHANISM_INFO pInfo);

    /**
     * C_InitToken initializes a token.<br>
     * Original signature :
     * <code>__attribute__((dllimport)) CK_RV C_InitToken(CK_SLOT_ID, CK_UTF8CHAR_PTR, CK_UNativeLong, CK_UTF8CHAR_PTR)</code>
     * <br>
     * 
     * @param slotID
     *            ID of the token's slot<br>
     * @param pPin
     *            the SO's initial PIN<br>
     * @param ulPinLen
     *            length in bytes of the PIN<br>
     * @param pLabel
     *            32-byte token label (blank padded)<br>
     *            <i>native declaration : pkcs11_v2.40/pkcs11f.h:124</i>
     */
    NativeLong C_InitToken(NativeLong slotID, ByteBuffer pPin, NativeLong ulPinLen, ByteBuffer pLabel);

    /**
     * C_InitPIN initializes the normal user's PIN.<br>
     * Original signature :
     * <code>__attribute__((dllimport)) CK_RV C_InitPIN(CK_SESSION_HANDLE, CK_UTF8CHAR_PTR, CK_UNativeLong)</code>
     * <br>
     * 
     * @param hSession
     *            the session's handle<br>
     * @param pPin
     *            the normal user's PIN<br>
     * @param ulPinLen
     *            length in bytes of the PIN<br>
     *            <i>native declaration : pkcs11_v2.40/pkcs11f.h:136</i>
     */
    NativeLong C_InitPIN(NativeLong hSession, ByteBuffer pPin, NativeLong ulPinLen);

    /**
     * C_SetPIN modifies the PIN of the user who is logged in.<br>
     * Original signature :
     * <code>__attribute__((dllimport)) CK_RV C_SetPIN(CK_SESSION_HANDLE, CK_UTF8CHAR_PTR, CK_UNativeLong, CK_UTF8CHAR_PTR, CK_UNativeLong)</code>
     * <br>
     * 
     * @param hSession
     *            the session's handle<br>
     * @param pOldPin
     *            the old PIN<br>
     * @param ulOldLen
     *            length of the old PIN<br>
     * @param pNewPin
     *            the new PIN<br>
     * @param ulNewLen
     *            length of the new PIN<br>
     *            <i>native declaration : pkcs11_v2.40/pkcs11f.h:147</i>
     */
    NativeLong C_SetPIN(NativeLong hSession, ByteBuffer pOldPin, NativeLong ulOldLen, ByteBuffer pNewPin,
            NativeLong ulNewLen);

    /**
     * C_OpenSession opens a session between an application and a<br>
     * token.<br>
     * Original signature :
     * <code>__attribute__((dllimport)) CK_RV C_OpenSession(CK_SLOT_ID, CK_FLAGS, CK_VOID_PTR, CK_NOTIFY, CK_SESSION_HANDLE_PTR)</code>
     * <br>
     * 
     * @param slotID
     *            the slot's ID<br>
     * @param flags
     *            from CK_SESSION_INFO<br>
     * @param pApplication
     *            passed to callback<br>
     * @param Notify
     *            callback function<br>
     * @param phSession
     *            gets session handle<br>
     *            <i>native declaration : pkcs11_v2.40/pkcs11f.h:165</i>
     */
    NativeLong C_OpenSession(NativeLong slotID, NativeLong flags, Pointer pApplication,
            CryptokiLibrary.CK_NOTIFY Notify, NativeLongByReference phSession);

    /**
     * C_CloseSession closes a session between an application and a<br>
     * token.<br>
     * Original signature :
     * <code>__attribute__((dllimport)) CK_RV C_CloseSession(CK_SESSION_HANDLE)</code>
     * <br>
     * 
     * @param hSession
     *            the session's handle<br>
     *            <i>native declaration : pkcs11_v2.40/pkcs11f.h:180</i>
     */
    NativeLong C_CloseSession(NativeLong hSession);

    /**
     * C_CloseAllSessions closes all sessions with a token.<br>
     * Original signature :
     * <code>__attribute__((dllimport)) CK_RV C_CloseAllSessions(CK_SLOT_ID)</code>
     * <br>
     * 
     * @param slotID
     *            the token's slot<br>
     *            <i>native declaration : pkcs11_v2.40/pkcs11f.h:189</i>
     */
    NativeLong C_CloseAllSessions(NativeLong slotID);

    /**
     * C_GetSessionInfo obtains information about the session.<br>
     * Original signature :
     * <code>__attribute__((dllimport)) CK_RV C_GetSessionInfo(CK_SESSION_HANDLE, CK_SESSION_INFO_PTR)</code>
     * <br>
     * 
     * @param hSession
     *            the session's handle<br>
     * @param pInfo
     *            receives session info<br>
     *            <i>native declaration : pkcs11_v2.40/pkcs11f.h:198</i>
     */
    NativeLong C_GetSessionInfo(NativeLong hSession, CK_SESSION_INFO pInfo);

    /**
     * C_GetOperationState obtains the state of the cryptographic operation<br>
     * in a session.<br>
     * Original signature :
     * <code>__attribute__((dllimport)) CK_RV C_GetOperationState(CK_SESSION_HANDLE, CK_BYTE_PTR, CK_UNativeLong_PTR)</code>
     * <br>
     * 
     * @param hSession
     *            session's handle<br>
     * @param pOperationState
     *            gets state<br>
     * @param pulOperationStateLen
     *            gets state length<br>
     *            <i>native declaration : pkcs11_v2.40/pkcs11f.h:210</i>
     */
    NativeLong C_GetOperationState(NativeLong hSession, ByteBuffer pOperationState, LongBuffer pulOperationStateLen);

    /**
     * C_SetOperationState restores the state of the cryptographic<br>
     * operation in a session.<br>
     * Original signature :
     * <code>__attribute__((dllimport)) CK_RV C_SetOperationState(CK_SESSION_HANDLE, CK_BYTE_PTR, CK_UNativeLong, CK_OBJECT_HANDLE, CK_OBJECT_HANDLE)</code>
     * <br>
     * 
     * @param hSession
     *            session's handle<br>
     * @param pOperationState
     *            holds state<br>
     * @param ulOperationStateLen
     *            holds state length<br>
     * @param hEncryptionKey
     *            en/decryption key<br>
     * @param hAuthenticationKey
     *            sign/verify key<br>
     *            <i>native declaration : pkcs11_v2.40/pkcs11f.h:223</i>
     */
    NativeLong C_SetOperationState(NativeLong hSession, ByteBuffer pOperationState, NativeLong ulOperationStateLen,
            NativeLong hEncryptionKey, NativeLong hAuthenticationKey);

    /**
     * C_Login logs a user into a token.<br>
     * Original signature :
     * <code>__attribute__((dllimport)) CK_RV C_Login(CK_SESSION_HANDLE, CK_USER_TYPE, CK_UTF8CHAR_PTR, CK_UNativeLong)</code>
     * <br>
     * 
     * @param hSession
     *            the session's handle<br>
     * @param userType
     *            the user type<br>
     * @param pPin
     *            the user's PIN<br>
     * @param ulPinLen
     *            the length of the PIN<br>
     *            <i>native declaration : pkcs11_v2.40/pkcs11f.h:236</i>
     */
    NativeLong C_Login(NativeLong hSession, NativeLong userType, ByteBuffer pPin, NativeLong ulPinLen);

    /**
     * C_Logout logs a user out from a token.<br>
     * Original signature :
     * <code>__attribute__((dllimport)) CK_RV C_Logout(CK_SESSION_HANDLE)</code>
     * <br>
     * 
     * @param hSession
     *            the session's handle<br>
     *            <i>native declaration : pkcs11_v2.40/pkcs11f.h:248</i>
     */
    NativeLong C_Logout(NativeLong hSession);

    /**
     * C_CreateObject creates a new object.<br>
     * Original signature :
     * <code>__attribute__((dllimport)) CK_RV C_CreateObject(CK_SESSION_HANDLE, CK_ATTRIBUTE_PTR, CK_UNativeLong, CK_OBJECT_HANDLE_PTR)</code>
     * <br>
     * 
     * @param hSession
     *            the session's handle<br>
     * @param pTemplate
     *            the object's template<br>
     * @param ulCount
     *            attributes in template<br>
     * @param phObject
     *            gets new object's handle.<br>
     *            <i>native declaration : pkcs11_v2.40/pkcs11f.h:260</i>
     */
    NativeLong C_CreateObject(NativeLong hSession, CK_ATTRIBUTE pTemplate, NativeLong ulCount, LongBuffer phObject);

    /**
     * C_CopyObject copies an object, creating a new object for the<br>
     * copy.<br>
     * Original signature :
     * <code>__attribute__((dllimport)) CK_RV C_CopyObject(CK_SESSION_HANDLE, CK_OBJECT_HANDLE, CK_ATTRIBUTE_PTR, CK_UNativeLong, CK_OBJECT_HANDLE_PTR)</code>
     * <br>
     * 
     * @param hSession
     *            the session's handle<br>
     * @param hObject
     *            the object's handle<br>
     * @param pTemplate
     *            template for new object<br>
     * @param ulCount
     *            attributes in template<br>
     * @param phNewObject
     *            receives handle of copy<br>
     *            <i>native declaration : pkcs11_v2.40/pkcs11f.h:274</i>
     */
    NativeLong C_CopyObject(NativeLong hSession, NativeLong hObject, CK_ATTRIBUTE pTemplate, NativeLong ulCount,
            LongBuffer phNewObject);

    /**
     * C_DestroyObject destroys an object.<br>
     * Original signature :
     * <code>__attribute__((dllimport)) CK_RV C_DestroyObject(CK_SESSION_HANDLE, CK_OBJECT_HANDLE)</code>
     * <br>
     * 
     * @param hSession
     *            the session's handle<br>
     * @param hObject
     *            the object's handle<br>
     *            <i>native declaration : pkcs11_v2.40/pkcs11f.h:287</i>
     */
    NativeLong C_DestroyObject(NativeLong hSession, NativeLong hObject);

    /**
     * C_GetObjectSize gets the size of an object in bytes.<br>
     * Original signature :
     * <code>__attribute__((dllimport)) CK_RV C_GetObjectSize(CK_SESSION_HANDLE, CK_OBJECT_HANDLE, CK_UNativeLong_PTR)</code>
     * <br>
     * 
     * @param hSession
     *            the session's handle<br>
     * @param hObject
     *            the object's handle<br>
     * @param pulSize
     *            receives size of object<br>
     *            <i>native declaration : pkcs11_v2.40/pkcs11f.h:297</i>
     */
    NativeLong C_GetObjectSize(NativeLong hSession, NativeLong hObject, LongBuffer pulSize);

    /**
     * C_GetAttributeValue obtains the value of one or more object<br>
     * attributes.<br>
     * Original signature :
     * <code>__attribute__((dllimport)) CK_RV C_GetAttributeValue(CK_SESSION_HANDLE, CK_OBJECT_HANDLE, CK_ATTRIBUTE_PTR, CK_UNativeLong)</code>
     * <br>
     * 
     * @param hSession
     *            the session's handle<br>
     * @param hObject
     *            the object's handle<br>
     * @param pTemplate
     *            specifies attrs; gets vals<br>
     * @param ulCount
     *            attributes in template<br>
     *            <i>native declaration : pkcs11_v2.40/pkcs11f.h:310</i>
     */
    NativeLong C_GetAttributeValue(NativeLong hSession, NativeLong hObject, CK_ATTRIBUTE pTemplate, NativeLong ulCount);

    /**
     * C_SetAttributeValue modifies the value of one or more object<br>
     * attributes.<br>
     * Original signature :
     * <code>__attribute__((dllimport)) CK_RV C_SetAttributeValue(CK_SESSION_HANDLE, CK_OBJECT_HANDLE, CK_ATTRIBUTE_PTR, CK_UNativeLong)</code>
     * <br>
     * 
     * @param hSession
     *            the session's handle<br>
     * @param hObject
     *            the object's handle<br>
     * @param pTemplate
     *            specifies attrs and values<br>
     * @param ulCount
     *            attributes in template<br>
     *            <i>native declaration : pkcs11_v2.40/pkcs11f.h:324</i>
     */
    NativeLong C_SetAttributeValue(NativeLong hSession, NativeLong hObject, CK_ATTRIBUTE pTemplate, NativeLong ulCount);

    /**
     * C_FindObjectsInit initializes a search for token and session<br>
     * objects that match a template.<br>
     * Original signature :
     * <code>__attribute__((dllimport)) CK_RV C_FindObjectsInit(CK_SESSION_HANDLE, CK_ATTRIBUTE_PTR, CK_UNativeLong)</code>
     * <br>
     * 
     * @param hSession
     *            the session's handle<br>
     * @param pTemplate
     *            attribute values to match<br>
     * @param ulCount
     *            attrs in search template<br>
     *            <i>native declaration : pkcs11_v2.40/pkcs11f.h:338</i>
     */
    NativeLong C_FindObjectsInit(NativeLong hSession, CK_ATTRIBUTE pTemplate, NativeLong ulCount);

    /**
     * C_FindObjects continues a search for token and session<br>
     * objects that match a template, obtaining additional object<br>
     * handles.<br>
     * Original signature :
     * <code>__attribute__((dllimport)) CK_RV C_FindObjects(CK_SESSION_HANDLE, CK_OBJECT_HANDLE_PTR, CK_UNativeLong, CK_UNativeLong_PTR)</code>
     * <br>
     * 
     * @param hSession
     *            session's handle<br>
     * @param phObject
     *            gets obj. handles<br>
     * @param ulMaxObjectCount
     *            max handles to get<br>
     * @param pulObjectCount
     *            actual # returned<br>
     *            <i>native declaration : pkcs11_v2.40/pkcs11f.h:352</i>
     */
    NativeLong C_FindObjects(NativeLong hSession, Memory phObject, NativeLong ulMaxObjectCount,
            NativeLongByReference pulObjectCount);

    /**
     * C_FindObjectsFinal finishes a search for token and session<br>
     * objects.<br>
     * Original signature :
     * <code>__attribute__((dllimport)) CK_RV C_FindObjectsFinal(CK_SESSION_HANDLE)</code>
     * <br>
     * 
     * @param hSession
     *            the session's handle<br>
     *            <i>native declaration : pkcs11_v2.40/pkcs11f.h:366</i>
     */
    NativeLong C_FindObjectsFinal(NativeLong hSession);

    /**
     * C_EncryptInit initializes an encryption operation.<br>
     * Original signature :
     * <code>__attribute__((dllimport)) CK_RV C_EncryptInit(CK_SESSION_HANDLE, CK_MECHANISM_PTR, CK_OBJECT_HANDLE)</code>
     * <br>
     * 
     * @param hSession
     *            the session's handle<br>
     * @param pMechanism
     *            the encryption mechanism<br>
     * @param hKey
     *            handle of encryption key<br>
     *            <i>native declaration : pkcs11_v2.40/pkcs11f.h:378</i>
     */
    NativeLong C_EncryptInit(NativeLong hSession, CK_MECHANISM pMechanism, NativeLong hKey);

    /**
     * C_Encrypt encrypts single-part data.<br>
     * Original signature :
     * <code>__attribute__((dllimport)) CK_RV C_Encrypt(CK_SESSION_HANDLE, CK_BYTE_PTR, CK_UNativeLong, CK_BYTE_PTR, CK_UNativeLong_PTR)</code>
     * <br>
     * 
     * @param hSession
     *            session's handle<br>
     * @param pData
     *            the plaintext data<br>
     * @param ulDataLen
     *            bytes of plaintext<br>
     * @param pEncryptedData
     *            gets ciphertext<br>
     * @param pulEncryptedDataLen
     *            gets c-text size<br>
     *            <i>native declaration : pkcs11_v2.40/pkcs11f.h:389</i>
     */
    NativeLong C_Encrypt(NativeLong hSession, ByteBuffer pData, NativeLong ulDataLen, ByteBuffer pEncryptedData,
            LongBuffer pulEncryptedDataLen);

    /**
     * C_EncryptUpdate continues a multiple-part encryption<br>
     * operation.<br>
     * Original signature :
     * <code>__attribute__((dllimport)) CK_RV C_EncryptUpdate(CK_SESSION_HANDLE, CK_BYTE_PTR, CK_UNativeLong, CK_BYTE_PTR, CK_UNativeLong_PTR)</code>
     * <br>
     * 
     * @param hSession
     *            session's handle<br>
     * @param pPart
     *            the plaintext data<br>
     * @param ulPartLen
     *            plaintext data len<br>
     * @param pEncryptedPart
     *            gets ciphertext<br>
     * @param pulEncryptedPartLen
     *            gets c-text size<br>
     *            <i>native declaration : pkcs11_v2.40/pkcs11f.h:404</i>
     */
    NativeLong C_EncryptUpdate(NativeLong hSession, ByteBuffer pPart, NativeLong ulPartLen, ByteBuffer pEncryptedPart,
            LongBuffer pulEncryptedPartLen);

    /**
     * C_EncryptFinal finishes a multiple-part encryption<br>
     * operation.<br>
     * Original signature :
     * <code>__attribute__((dllimport)) CK_RV C_EncryptFinal(CK_SESSION_HANDLE, CK_BYTE_PTR, CK_UNativeLong_PTR)</code>
     * <br>
     * 
     * @param hSession
     *            session handle<br>
     * @param pLastEncryptedPart
     *            last c-text<br>
     * @param pulLastEncryptedPartLen
     *            gets last size<br>
     *            <i>native declaration : pkcs11_v2.40/pkcs11f.h:419</i>
     */
    NativeLong C_EncryptFinal(NativeLong hSession, ByteBuffer pLastEncryptedPart, LongBuffer pulLastEncryptedPartLen);

    /**
     * C_DecryptInit initializes a decryption operation.<br>
     * Original signature :
     * <code>__attribute__((dllimport)) CK_RV C_DecryptInit(CK_SESSION_HANDLE, CK_MECHANISM_PTR, CK_OBJECT_HANDLE)</code>
     * <br>
     * 
     * @param hSession
     *            the session's handle<br>
     * @param pMechanism
     *            the decryption mechanism<br>
     * @param hKey
     *            handle of decryption key<br>
     *            <i>native declaration : pkcs11_v2.40/pkcs11f.h:430</i>
     */
    NativeLong C_DecryptInit(NativeLong hSession, CK_MECHANISM pMechanism, NativeLong hKey);

    /**
     * C_Decrypt decrypts encrypted data in a single part.<br>
     * Original signature :
     * <code>__attribute__((dllimport)) CK_RV C_Decrypt(CK_SESSION_HANDLE, CK_BYTE_PTR, CK_UNativeLong, CK_BYTE_PTR, CK_UNativeLong_PTR)</code>
     * <br>
     * 
     * @param hSession
     *            session's handle<br>
     * @param pEncryptedData
     *            ciphertext<br>
     * @param ulEncryptedDataLen
     *            ciphertext length<br>
     * @param pData
     *            gets plaintext<br>
     * @param pulDataLen
     *            gets p-text size<br>
     *            <i>native declaration : pkcs11_v2.40/pkcs11f.h:441</i>
     */
    NativeLong C_Decrypt(NativeLong hSession, ByteBuffer pEncryptedData, NativeLong ulEncryptedDataLen,
            ByteBuffer pData, LongBuffer pulDataLen);

    /**
     * C_DecryptUpdate continues a multiple-part decryption<br>
     * operation.<br>
     * Original signature :
     * <code>__attribute__((dllimport)) CK_RV C_DecryptUpdate(CK_SESSION_HANDLE, CK_BYTE_PTR, CK_UNativeLong, CK_BYTE_PTR, CK_UNativeLong_PTR)</code>
     * <br>
     * 
     * @param hSession
     *            session's handle<br>
     * @param pEncryptedPart
     *            encrypted data<br>
     * @param ulEncryptedPartLen
     *            input length<br>
     * @param pPart
     *            gets plaintext<br>
     * @param pulPartLen
     *            p-text size<br>
     *            <i>native declaration : pkcs11_v2.40/pkcs11f.h:456</i>
     */
    NativeLong C_DecryptUpdate(NativeLong hSession, ByteBuffer pEncryptedPart, NativeLong ulEncryptedPartLen,
            ByteBuffer pPart, LongBuffer pulPartLen);

    /**
     * C_DecryptFinal finishes a multiple-part decryption<br>
     * operation.<br>
     * Original signature :
     * <code>__attribute__((dllimport)) CK_RV C_DecryptFinal(CK_SESSION_HANDLE, CK_BYTE_PTR, CK_UNativeLong_PTR)</code>
     * <br>
     * 
     * @param hSession
     *            the session's handle<br>
     * @param pLastPart
     *            gets plaintext<br>
     * @param pulLastPartLen
     *            p-text size<br>
     *            <i>native declaration : pkcs11_v2.40/pkcs11f.h:471</i>
     */
    NativeLong C_DecryptFinal(NativeLong hSession, ByteBuffer pLastPart, LongBuffer pulLastPartLen);

    /**
     * C_DigestInit initializes a message-digesting operation.<br>
     * Original signature :
     * <code>__attribute__((dllimport)) CK_RV C_DigestInit(CK_SESSION_HANDLE, CK_MECHANISM_PTR)</code>
     * <br>
     * 
     * @param hSession
     *            the session's handle<br>
     * @param pMechanism
     *            the digesting mechanism<br>
     *            <i>native declaration : pkcs11_v2.40/pkcs11f.h:485</i>
     */
    NativeLong C_DigestInit(NativeLong hSession, CK_MECHANISM pMechanism);

    /**
     * C_Digest digests data in a single part.<br>
     * Original signature :
     * <code>__attribute__((dllimport)) CK_RV C_Digest(CK_SESSION_HANDLE, CK_BYTE_PTR, CK_UNativeLong, CK_BYTE_PTR, CK_UNativeLong_PTR)</code>
     * <br>
     * 
     * @param hSession
     *            the session's handle<br>
     * @param pData
     *            data to be digested<br>
     * @param ulDataLen
     *            bytes of data to digest<br>
     * @param pDigest
     *            gets the message digest<br>
     * @param pulDigestLen
     *            gets digest length<br>
     *            <i>native declaration : pkcs11_v2.40/pkcs11f.h:495</i>
     */
    NativeLong C_Digest(NativeLong hSession, ByteBuffer pData, NativeLong ulDataLen, ByteBuffer pDigest,
            LongBuffer pulDigestLen);

    /**
     * C_DigestUpdate continues a multiple-part message-digesting<br>
     * operation.<br>
     * Original signature :
     * <code>__attribute__((dllimport)) CK_RV C_DigestUpdate(CK_SESSION_HANDLE, CK_BYTE_PTR, CK_UNativeLong)</code>
     * <br>
     * 
     * @param hSession
     *            the session's handle<br>
     * @param pPart
     *            data to be digested<br>
     * @param ulPartLen
     *            bytes of data to be digested<br>
     *            <i>native declaration : pkcs11_v2.40/pkcs11f.h:510</i>
     */
    NativeLong C_DigestUpdate(NativeLong hSession, ByteBuffer pPart, NativeLong ulPartLen);

    /**
     * C_DigestKey continues a multi-part message-digesting<br>
     * operation, by digesting the value of a secret key as part of<br>
     * the data already digested.<br>
     * Original signature :
     * <code>__attribute__((dllimport)) CK_RV C_DigestKey(CK_SESSION_HANDLE, CK_OBJECT_HANDLE)</code>
     * <br>
     * 
     * @param hSession
     *            the session's handle<br>
     * @param hKey
     *            secret key to digest<br>
     *            <i>native declaration : pkcs11_v2.40/pkcs11f.h:524</i>
     */
    NativeLong C_DigestKey(NativeLong hSession, NativeLong hKey);

    /**
     * C_DigestFinal finishes a multiple-part message-digesting<br>
     * operation.<br>
     * Original signature :
     * <code>__attribute__((dllimport)) CK_RV C_DigestFinal(CK_SESSION_HANDLE, CK_BYTE_PTR, CK_UNativeLong_PTR)</code>
     * <br>
     * 
     * @param hSession
     *            the session's handle<br>
     * @param pDigest
     *            gets the message digest<br>
     * @param pulDigestLen
     *            gets byte count of digest<br>
     *            <i>native declaration : pkcs11_v2.40/pkcs11f.h:536</i>
     */
    NativeLong C_DigestFinal(NativeLong hSession, ByteBuffer pDigest, LongBuffer pulDigestLen);

    /**
     * C_SignInit initializes a signature (private key encryption)<br>
     * operation, where the signature is (will be) an appendix to<br>
     * the data, and plaintext cannot be recovered from the<br>
     * signature.<br>
     * Original signature :
     * <code>__attribute__((dllimport)) CK_RV C_SignInit(CK_SESSION_HANDLE, CK_MECHANISM_PTR, CK_OBJECT_HANDLE)</code>
     * <br>
     * 
     * @param hSession
     *            the session's handle<br>
     * @param pMechanism
     *            the signature mechanism<br>
     * @param hKey
     *            handle of signature key<br>
     *            <i>native declaration : pkcs11_v2.40/pkcs11f.h:554</i>
     */
    NativeLong C_SignInit(NativeLong hSession, CK_MECHANISM pMechanism, NativeLong hKey);

    /**
     * C_Sign signs (encrypts with private key) data in a single<br>
     * part, where the signature is (will be) an appendix to the<br>
     * data, and plaintext cannot be recovered from the signature.<br>
     * Original signature :
     * <code>__attribute__((dllimport)) CK_RV C_Sign(CK_SESSION_HANDLE, CK_BYTE_PTR, CK_UNativeLong, CK_BYTE_PTR, CK_UNativeLong_PTR)</code>
     * <br>
     * 
     * @param hSession
     *            the session's handle<br>
     * @param pData
     *            the data to sign<br>
     * @param ulDataLen
     *            count of bytes to sign<br>
     * @param pSignature
     *            gets the signature<br>
     * @param pulSignatureLen
     *            gets signature length<br>
     *            <i>native declaration : pkcs11_v2.40/pkcs11f.h:568</i>
     */
    NativeLong C_Sign(NativeLong hSession, ByteBuffer pData, NativeLong ulDataLen, ByteBuffer pSignature,
            NativeLongByReference pulSignatureLen);

    /**
     * C_SignUpdate continues a multiple-part signature operation,<br>
     * where the signature is (will be) an appendix to the data,<br>
     * and plaintext cannot be recovered from the signature.<br>
     * Original signature :
     * <code>__attribute__((dllimport)) CK_RV C_SignUpdate(CK_SESSION_HANDLE, CK_BYTE_PTR, CK_UNativeLong)</code>
     * <br>
     * 
     * @param hSession
     *            the session's handle<br>
     * @param pPart
     *            the data to sign<br>
     * @param ulPartLen
     *            count of bytes to sign<br>
     *            <i>native declaration : pkcs11_v2.40/pkcs11f.h:584</i>
     */
    NativeLong C_SignUpdate(NativeLong hSession, ByteBuffer pPart, NativeLong ulPartLen);

    /**
     * C_SignFinal finishes a multiple-part signature operation,<br>
     * returning the signature.<br>
     * Original signature :
     * <code>__attribute__((dllimport)) CK_RV C_SignFinal(CK_SESSION_HANDLE, CK_BYTE_PTR, CK_UNativeLong_PTR)</code>
     * <br>
     * 
     * @param hSession
     *            the session's handle<br>
     * @param pSignature
     *            gets the signature<br>
     * @param pulSignatureLen
     *            gets signature length<br>
     *            <i>native declaration : pkcs11_v2.40/pkcs11f.h:597</i>
     */
    NativeLong C_SignFinal(NativeLong hSession, ByteBuffer pSignature, LongBuffer pulSignatureLen);

    /**
     * C_SignRecoverInit initializes a signature operation, where<br>
     * the data can be recovered from the signature.<br>
     * Original signature :
     * <code>__attribute__((dllimport)) CK_RV C_SignRecoverInit(CK_SESSION_HANDLE, CK_MECHANISM_PTR, CK_OBJECT_HANDLE)</code>
     * <br>
     * 
     * @param hSession
     *            the session's handle<br>
     * @param pMechanism
     *            the signature mechanism<br>
     * @param hKey
     *            handle of the signature key<br>
     *            <i>native declaration : pkcs11_v2.40/pkcs11f.h:610</i>
     */
    NativeLong C_SignRecoverInit(NativeLong hSession, CK_MECHANISM pMechanism, NativeLong hKey);

    /**
     * C_SignRecover signs data in a single operation, where the<br>
     * data can be recovered from the signature.<br>
     * Original signature :
     * <code>__attribute__((dllimport)) CK_RV C_SignRecover(CK_SESSION_HANDLE, CK_BYTE_PTR, CK_UNativeLong, CK_BYTE_PTR, CK_UNativeLong_PTR)</code>
     * <br>
     * 
     * @param hSession
     *            the session's handle<br>
     * @param pData
     *            the data to sign<br>
     * @param ulDataLen
     *            count of bytes to sign<br>
     * @param pSignature
     *            gets the signature<br>
     * @param pulSignatureLen
     *            gets signature length<br>
     *            <i>native declaration : pkcs11_v2.40/pkcs11f.h:623</i>
     */
    NativeLong C_SignRecover(NativeLong hSession, ByteBuffer pData, NativeLong ulDataLen, ByteBuffer pSignature,
            LongBuffer pulSignatureLen);

    /**
     * C_VerifyInit initializes a verification operation, where the<br>
     * signature is an appendix to the data, and plaintext cannot<br>
     * cannot be recovered from the signature (e.g. DSA).<br>
     * Original signature :
     * <code>__attribute__((dllimport)) CK_RV C_VerifyInit(CK_SESSION_HANDLE, CK_MECHANISM_PTR, CK_OBJECT_HANDLE)</code>
     * <br>
     * 
     * @param hSession
     *            the session's handle<br>
     * @param pMechanism
     *            the verification mechanism<br>
     * @param hKey
     *            verification key<br>
     *            <i>native declaration : pkcs11_v2.40/pkcs11f.h:642</i>
     */
    NativeLong C_VerifyInit(NativeLong hSession, CK_MECHANISM pMechanism, NativeLong hKey);

    /**
     * C_Verify verifies a signature in a single-part operation,<br>
     * where the signature is an appendix to the data, and plaintext<br>
     * cannot be recovered from the signature.<br>
     * Original signature :
     * <code>__attribute__((dllimport)) CK_RV C_Verify(CK_SESSION_HANDLE, CK_BYTE_PTR, CK_UNativeLong, CK_BYTE_PTR, CK_UNativeLong)</code>
     * <br>
     * 
     * @param hSession
     *            the session's handle<br>
     * @param pData
     *            signed data<br>
     * @param ulDataLen
     *            length of signed data<br>
     * @param pSignature
     *            signature<br>
     * @param ulSignatureLen
     *            signature length<br>
     *            <i>native declaration : pkcs11_v2.40/pkcs11f.h:656</i>
     */
    NativeLong C_Verify(NativeLong hSession, ByteBuffer pData, NativeLong ulDataLen, ByteBuffer pSignature,
            NativeLong ulSignatureLen);

    /**
     * C_VerifyUpdate continues a multiple-part verification<br>
     * operation, where the signature is an appendix to the data,<br>
     * and plaintext cannot be recovered from the signature.<br>
     * Original signature :
     * <code>__attribute__((dllimport)) CK_RV C_VerifyUpdate(CK_SESSION_HANDLE, CK_BYTE_PTR, CK_UNativeLong)</code>
     * <br>
     * 
     * @param hSession
     *            the session's handle<br>
     * @param pPart
     *            signed data<br>
     * @param ulPartLen
     *            length of signed data<br>
     *            <i>native declaration : pkcs11_v2.40/pkcs11f.h:672</i>
     */
    NativeLong C_VerifyUpdate(NativeLong hSession, ByteBuffer pPart, NativeLong ulPartLen);

    /**
     * C_VerifyFinal finishes a multiple-part verification<br>
     * operation, checking the signature.<br>
     * Original signature :
     * <code>__attribute__((dllimport)) CK_RV C_VerifyFinal(CK_SESSION_HANDLE, CK_BYTE_PTR, CK_UNativeLong)</code>
     * <br>
     * 
     * @param hSession
     *            the session's handle<br>
     * @param pSignature
     *            signature to verify<br>
     * @param ulSignatureLen
     *            signature length<br>
     *            <i>native declaration : pkcs11_v2.40/pkcs11f.h:685</i>
     */
    NativeLong C_VerifyFinal(NativeLong hSession, ByteBuffer pSignature, NativeLong ulSignatureLen);

    /**
     * C_VerifyRecoverInit initializes a signature verification<br>
     * operation, where the data is recovered from the signature.<br>
     * Original signature :
     * <code>__attribute__((dllimport)) CK_RV C_VerifyRecoverInit(CK_SESSION_HANDLE, CK_MECHANISM_PTR, CK_OBJECT_HANDLE)</code>
     * <br>
     * 
     * @param hSession
     *            the session's handle<br>
     * @param pMechanism
     *            the verification mechanism<br>
     * @param hKey
     *            verification key<br>
     *            <i>native declaration : pkcs11_v2.40/pkcs11f.h:698</i>
     */
    NativeLong C_VerifyRecoverInit(NativeLong hSession, CK_MECHANISM pMechanism, NativeLong hKey);

    /**
     * C_VerifyRecover verifies a signature in a single-part<br>
     * operation, where the data is recovered from the signature.<br>
     * Original signature :
     * <code>__attribute__((dllimport)) CK_RV C_VerifyRecover(CK_SESSION_HANDLE, CK_BYTE_PTR, CK_UNativeLong, CK_BYTE_PTR, CK_UNativeLong_PTR)</code>
     * <br>
     * 
     * @param hSession
     *            the session's handle<br>
     * @param pSignature
     *            signature to verify<br>
     * @param ulSignatureLen
     *            signature length<br>
     * @param pData
     *            gets signed data<br>
     * @param pulDataLen
     *            gets signed data len<br>
     *            <i>native declaration : pkcs11_v2.40/pkcs11f.h:711</i>
     */
    NativeLong C_VerifyRecover(NativeLong hSession, ByteBuffer pSignature, NativeLong ulSignatureLen, ByteBuffer pData,
            LongBuffer pulDataLen);

    /**
     * C_DigestEncryptUpdate continues a multiple-part digesting<br>
     * and encryption operation.<br>
     * Original signature :
     * <code>__attribute__((dllimport)) CK_RV C_DigestEncryptUpdate(CK_SESSION_HANDLE, CK_BYTE_PTR, CK_UNativeLong, CK_BYTE_PTR, CK_UNativeLong_PTR)</code>
     * <br>
     * 
     * @param hSession
     *            session's handle<br>
     * @param pPart
     *            the plaintext data<br>
     * @param ulPartLen
     *            plaintext length<br>
     * @param pEncryptedPart
     *            gets ciphertext<br>
     * @param pulEncryptedPartLen
     *            gets c-text length<br>
     *            <i>native declaration : pkcs11_v2.40/pkcs11f.h:729</i>
     */
    NativeLong C_DigestEncryptUpdate(NativeLong hSession, ByteBuffer pPart, NativeLong ulPartLen,
            ByteBuffer pEncryptedPart, LongBuffer pulEncryptedPartLen);

    /**
     * C_DecryptDigestUpdate continues a multiple-part decryption and<br>
     * digesting operation.<br>
     * Original signature :
     * <code>__attribute__((dllimport)) CK_RV C_DecryptDigestUpdate(CK_SESSION_HANDLE, CK_BYTE_PTR, CK_UNativeLong, CK_BYTE_PTR, CK_UNativeLong_PTR)</code>
     * <br>
     * 
     * @param hSession
     *            session's handle<br>
     * @param pEncryptedPart
     *            ciphertext<br>
     * @param ulEncryptedPartLen
     *            ciphertext length<br>
     * @param pPart
     *            gets plaintext<br>
     * @param pulPartLen
     *            gets plaintext len<br>
     *            <i>native declaration : pkcs11_v2.40/pkcs11f.h:744</i>
     */
    NativeLong C_DecryptDigestUpdate(NativeLong hSession, ByteBuffer pEncryptedPart, NativeLong ulEncryptedPartLen,
            ByteBuffer pPart, LongBuffer pulPartLen);

    /**
     * C_SignEncryptUpdate continues a multiple-part signing and<br>
     * encryption operation.<br>
     * Original signature :
     * <code>__attribute__((dllimport)) CK_RV C_SignEncryptUpdate(CK_SESSION_HANDLE, CK_BYTE_PTR, CK_UNativeLong, CK_BYTE_PTR, CK_UNativeLong_PTR)</code>
     * <br>
     * 
     * @param hSession
     *            session's handle<br>
     * @param pPart
     *            the plaintext data<br>
     * @param ulPartLen
     *            plaintext length<br>
     * @param pEncryptedPart
     *            gets ciphertext<br>
     * @param pulEncryptedPartLen
     *            gets c-text length<br>
     *            <i>native declaration : pkcs11_v2.40/pkcs11f.h:759</i>
     */
    NativeLong C_SignEncryptUpdate(NativeLong hSession, ByteBuffer pPart, NativeLong ulPartLen,
            ByteBuffer pEncryptedPart, LongBuffer pulEncryptedPartLen);

    /**
     * C_DecryptVerifyUpdate continues a multiple-part decryption and<br>
     * verify operation.<br>
     * Original signature :
     * <code>__attribute__((dllimport)) CK_RV C_DecryptVerifyUpdate(CK_SESSION_HANDLE, CK_BYTE_PTR, CK_UNativeLong, CK_BYTE_PTR, CK_UNativeLong_PTR)</code>
     * <br>
     * 
     * @param hSession
     *            session's handle<br>
     * @param pEncryptedPart
     *            ciphertext<br>
     * @param ulEncryptedPartLen
     *            ciphertext length<br>
     * @param pPart
     *            gets plaintext<br>
     * @param pulPartLen
     *            gets p-text length<br>
     *            <i>native declaration : pkcs11_v2.40/pkcs11f.h:774</i>
     */
    NativeLong C_DecryptVerifyUpdate(NativeLong hSession, ByteBuffer pEncryptedPart, NativeLong ulEncryptedPartLen,
            ByteBuffer pPart, LongBuffer pulPartLen);

    /**
     * C_GenerateKey generates a secret key, creating a new key<br>
     * object.<br>
     * Original signature :
     * <code>__attribute__((dllimport)) CK_RV C_GenerateKey(CK_SESSION_HANDLE, CK_MECHANISM_PTR, CK_ATTRIBUTE_PTR, CK_UNativeLong, CK_OBJECT_HANDLE_PTR)</code>
     * <br>
     * 
     * @param hSession
     *            the session's handle<br>
     * @param pMechanism
     *            key generation mech.<br>
     * @param pTemplate
     *            template for new key<br>
     * @param ulCount
     *            # of attrs in template<br>
     * @param phKey
     *            gets handle of new key<br>
     *            <i>native declaration : pkcs11_v2.40/pkcs11f.h:792</i>
     */
    NativeLong C_GenerateKey(NativeLong hSession, CK_MECHANISM pMechanism, CK_ATTRIBUTE pTemplate, NativeLong ulCount,
            LongBuffer phKey);

    /**
     * C_GenerateKeyPair generates a public-key/private-key pair,<br>
     * creating new key objects.<br>
     * Original signature :
     * <code>__attribute__((dllimport)) CK_RV C_GenerateKeyPair(CK_SESSION_HANDLE, CK_MECHANISM_PTR, CK_ATTRIBUTE_PTR, CK_UNativeLong, CK_ATTRIBUTE_PTR, CK_UNativeLong, CK_OBJECT_HANDLE_PTR, CK_OBJECT_HANDLE_PTR)</code>
     * <br>
     * 
     * @param hSession
     *            session handle<br>
     * @param pMechanism
     *            key-gen mech.<br>
     * @param pPublicKeyTemplate
     *            template for pub. key<br>
     * @param ulPublicKeyAttributeCount
     *            # pub. attrs.<br>
     * @param pPrivateKeyTemplate
     *            template for priv. key<br>
     * @param ulPrivateKeyAttributeCount
     *            # priv. attrs.<br>
     * @param phPublicKey
     *            gets pub. key handle<br>
     * @param phPrivateKey
     *            gets priv. key handle<br>
     *            <i>native declaration : pkcs11_v2.40/pkcs11f.h:807</i>
     */
    NativeLong C_GenerateKeyPair(NativeLong hSession, CK_MECHANISM pMechanism, CK_ATTRIBUTE pPublicKeyTemplate,
            NativeLong ulPublicKeyAttributeCount, CK_ATTRIBUTE pPrivateKeyTemplate,
            NativeLong ulPrivateKeyAttributeCount, LongBuffer phPublicKey, LongBuffer phPrivateKey);

    /**
     * C_WrapKey wraps (i.e., encrypts) a key.<br>
     * Original signature :
     * <code>__attribute__((dllimport)) CK_RV C_WrapKey(CK_SESSION_HANDLE, CK_MECHANISM_PTR, CK_OBJECT_HANDLE, CK_OBJECT_HANDLE, CK_BYTE_PTR, CK_UNativeLong_PTR)</code>
     * <br>
     * 
     * @param hSession
     *            the session's handle<br>
     * @param pMechanism
     *            the wrapping mechanism<br>
     * @param hWrappingKey
     *            wrapping key<br>
     * @param hKey
     *            key to be wrapped<br>
     * @param pWrappedKey
     *            gets wrapped key<br>
     * @param pulWrappedKeyLen
     *            gets wrapped key size<br>
     *            <i>native declaration : pkcs11_v2.40/pkcs11f.h:823</i>
     */
    NativeLong C_WrapKey(NativeLong hSession, CK_MECHANISM pMechanism, NativeLong hWrappingKey, NativeLong hKey,
            ByteBuffer pWrappedKey, LongBuffer pulWrappedKeyLen);

    /**
     * C_UnwrapKey unwraps (decrypts) a wrapped key, creating a new<br>
     * key object.<br>
     * Original signature :
     * <code>__attribute__((dllimport)) CK_RV C_UnwrapKey(CK_SESSION_HANDLE, CK_MECHANISM_PTR, CK_OBJECT_HANDLE, CK_BYTE_PTR, CK_UNativeLong, CK_ATTRIBUTE_PTR, CK_UNativeLong, CK_OBJECT_HANDLE_PTR)</code>
     * <br>
     * 
     * @param hSession
     *            session's handle<br>
     * @param pMechanism
     *            unwrapping mech.<br>
     * @param hUnwrappingKey
     *            unwrapping key<br>
     * @param pWrappedKey
     *            the wrapped key<br>
     * @param ulWrappedKeyLen
     *            wrapped key len<br>
     * @param pTemplate
     *            new key template<br>
     * @param ulAttributeCount
     *            template length<br>
     * @param phKey
     *            gets new handle<br>
     *            <i>native declaration : pkcs11_v2.40/pkcs11f.h:839</i>
     */
    NativeLong C_UnwrapKey(NativeLong hSession, CK_MECHANISM pMechanism, NativeLong hUnwrappingKey,
            ByteBuffer pWrappedKey, NativeLong ulWrappedKeyLen, CK_ATTRIBUTE pTemplate, NativeLong ulAttributeCount,
            LongBuffer phKey);

    /**
     * C_DeriveKey derives a key from a base key, creating a new key<br>
     * object.<br>
     * Original signature :
     * <code>__attribute__((dllimport)) CK_RV C_DeriveKey(CK_SESSION_HANDLE, CK_MECHANISM_PTR, CK_OBJECT_HANDLE, CK_ATTRIBUTE_PTR, CK_UNativeLong, CK_OBJECT_HANDLE_PTR)</code>
     * <br>
     * 
     * @param hSession
     *            session's handle<br>
     * @param pMechanism
     *            key deriv. mech.<br>
     * @param hBaseKey
     *            base key<br>
     * @param pTemplate
     *            new key template<br>
     * @param ulAttributeCount
     *            template length<br>
     * @param phKey
     *            gets new handle<br>
     *            <i>native declaration : pkcs11_v2.40/pkcs11f.h:857</i>
     */
    NativeLong C_DeriveKey(NativeLong hSession, CK_MECHANISM pMechanism, NativeLong hBaseKey, CK_ATTRIBUTE pTemplate,
            NativeLong ulAttributeCount, LongBuffer phKey);

    /**
     * C_SeedRandom mixes additional seed material into the token's<br>
     * random number generator.<br>
     * Original signature :
     * <code>__attribute__((dllimport)) CK_RV C_SeedRandom(CK_SESSION_HANDLE, CK_BYTE_PTR, CK_UNativeLong)</code>
     * <br>
     * 
     * @param hSession
     *            the session's handle<br>
     * @param pSeed
     *            the seed material<br>
     * @param ulSeedLen
     *            length of seed material<br>
     *            <i>native declaration : pkcs11_v2.40/pkcs11f.h:876</i>
     */
    NativeLong C_SeedRandom(NativeLong hSession, ByteBuffer pSeed, NativeLong ulSeedLen);

    /**
     * C_GenerateRandom generates random data.<br>
     * Original signature :
     * <code>__attribute__((dllimport)) CK_RV C_GenerateRandom(CK_SESSION_HANDLE, CK_BYTE_PTR, CK_UNativeLong)</code>
     * <br>
     * 
     * @param hSession
     *            the session's handle<br>
     * @param RandomData
     *            receives the random data<br>
     * @param ulRandomLen
     *            # of bytes to generate<br>
     *            <i>native declaration : pkcs11_v2.40/pkcs11f.h:887</i>
     */
    NativeLong C_GenerateRandom(NativeLong hSession, ByteBuffer RandomData, NativeLong ulRandomLen);

    /**
     * C_GetFunctionStatus is a legacy function; it obtains an<br>
     * updated status of a function running in parallel with an<br>
     * application.<br>
     * Original signature :
     * <code>__attribute__((dllimport)) CK_RV C_GetFunctionStatus(CK_SESSION_HANDLE)</code>
     * <br>
     * 
     * @param hSession
     *            the session's handle<br>
     *            <i>native declaration : pkcs11_v2.40/pkcs11f.h:904</i>
     */
    NativeLong C_GetFunctionStatus(NativeLong hSession);

    /**
     * C_CancelFunction is a legacy function; it cancels a function<br>
     * running in parallel.<br>
     * Original signature :
     * <code>__attribute__((dllimport)) CK_RV C_CancelFunction(CK_SESSION_HANDLE)</code>
     * <br>
     * 
     * @param hSession
     *            the session's handle<br>
     *            <i>native declaration : pkcs11_v2.40/pkcs11f.h:915</i>
     */
    NativeLong C_CancelFunction(NativeLong hSession);

    /**
     * C_WaitForSlotEvent waits for a slot event (token insertion,<br>
     * removal, etc.) to occur.<br>
     * Original signature :
     * <code>__attribute__((dllimport)) CK_RV C_WaitForSlotEvent(CK_FLAGS, CK_SLOT_ID_PTR, CK_VOID_PTR)</code>
     * <br>
     * 
     * @param flags
     *            blocking/nonblocking flag<br>
     * @param pSlot
     *            location that receives the slot ID<br>
     * @param pRserved
     *            reserved. Should be NULL_PTR<br>
     *            <i>native declaration : pkcs11_v2.40/pkcs11f.h:926</i>
     */
    NativeLong C_WaitForSlotEvent(NativeLong flags, NativeLongByReference pSlot, Pointer pRserved);

}
