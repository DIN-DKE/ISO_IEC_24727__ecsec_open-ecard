package org.openecard.mdlw.sal.cryptoki;
import com.sun.jna.Pointer;
import com.sun.jna.Structure;
import java.util.Arrays;
import java.util.List;
/**
 * <i>native declaration : pkcs11_v2.40/pkcs11t.h</i><br>
 * This file was autogenerated by <a href="http://jnaerator.googlecode.com/">JNAerator</a>,<br>
 * a tool written by <a href="http://ochafik.com/">Olivier Chafik</a> that <a href="http://code.google.com/p/jnaerator/wiki/CreditsAndLicense">uses a few opensource projects.</a>.<br>
 * For help, please visit <a href="http://nativelibs4java.googlecode.com/">NativeLibs4Java</a> , <a href="http://rococoa.dev.java.net/">Rococoa</a>, or <a href="http://jna.dev.java.net/">JNA</a>.
 */
public class CK_VERSION extends Structure {
	/**
	 * integer portion of version number<br>
	 * C type : CK_BYTE
	 */
	public byte major;
	public byte getMajor() {
		return major;
	}
	public void setMajor(byte major) {
		this.major = major;
	}
	/**
	 * 1/100ths portion of version number<br>
	 * C type : CK_BYTE
	 */
	public byte minor;
	public byte getMinor() {
		return minor;
	}
	public void setMinor(byte minor) {
		this.minor = minor;
	}
	public CK_VERSION() {
		super();
	}
	 protected List<String> getFieldOrder() {
		return Arrays.asList("major", "minor");
	}
	/**
	 * @param major integer portion of version number<br>
	 * C type : CK_BYTE<br>
	 * @param minor 1/100ths portion of version number<br>
	 * C type : CK_BYTE
	 */
	public CK_VERSION(byte major, byte minor) {
		super();
		this.major = major;
		this.minor = minor;
	}
	public CK_VERSION(Pointer peer) {
		super(peer);
	}
	public static class ByReference extends CK_VERSION implements Structure.ByReference {
		
	};
	public static class ByValue extends CK_VERSION implements Structure.ByValue {
		
	};
}
