package org.openecard.mdlw.sal.cryptoki;
import com.sun.jna.Pointer;
import com.sun.jna.Structure;
import java.util.Arrays;
import java.util.List;
/**
 * <i>native declaration : pkcs11_v2.40/pkcs11t.h</i><br>
 * This file was autogenerated by <a href="http://jnaerator.googlecode.com/">JNAerator</a>,<br>
 * a tool written by <a href="http://ochafik.com/">Olivier Chafik</a> that <a href="http://code.google.com/p/jnaerator/wiki/CreditsAndLicense">uses a few opensource projects.</a>.<br>
 * For help, please visit <a href="http://nativelibs4java.googlecode.com/">NativeLibs4Java</a> , <a href="http://rococoa.dev.java.net/">Rococoa</a>, or <a href="http://jna.dev.java.net/">JNA</a>.
 */
public class CK_SSL3_KEY_MAT_OUT extends Structure {
	/** C type : CK_OBJECT_HANDLE */
	public long hClientMacSecret;
	public long getHClientMacSecret() {
		return hClientMacSecret;
	}
	public void setHClientMacSecret(long hClientMacSecret) {
		this.hClientMacSecret = hClientMacSecret;
	}
	/** C type : CK_OBJECT_HANDLE */
	public long hServerMacSecret;
	public long getHServerMacSecret() {
		return hServerMacSecret;
	}
	public void setHServerMacSecret(long hServerMacSecret) {
		this.hServerMacSecret = hServerMacSecret;
	}
	/** C type : CK_OBJECT_HANDLE */
	public long hClientKey;
	public long getHClientKey() {
		return hClientKey;
	}
	public void setHClientKey(long hClientKey) {
		this.hClientKey = hClientKey;
	}
	/** C type : CK_OBJECT_HANDLE */
	public long hServerKey;
	public long getHServerKey() {
		return hServerKey;
	}
	public void setHServerKey(long hServerKey) {
		this.hServerKey = hServerKey;
	}
	/** C type : CK_BYTE_PTR */
	public Pointer pIVClient;
	public Pointer getPIVClient() {
		return pIVClient;
	}
	public void setPIVClient(Pointer pIVClient) {
		this.pIVClient = pIVClient;
	}
	/** C type : CK_BYTE_PTR */
	public Pointer pIVServer;
	public Pointer getPIVServer() {
		return pIVServer;
	}
	public void setPIVServer(Pointer pIVServer) {
		this.pIVServer = pIVServer;
	}
	public CK_SSL3_KEY_MAT_OUT() {
		super();
	}
	 protected List<String> getFieldOrder() {
		return Arrays.asList("hClientMacSecret", "hServerMacSecret", "hClientKey", "hServerKey", "pIVClient", "pIVServer");
	}
	/**
	 * @param hClientMacSecret C type : CK_OBJECT_HANDLE<br>
	 * @param hServerMacSecret C type : CK_OBJECT_HANDLE<br>
	 * @param hClientKey C type : CK_OBJECT_HANDLE<br>
	 * @param hServerKey C type : CK_OBJECT_HANDLE<br>
	 * @param pIVClient C type : CK_BYTE_PTR<br>
	 * @param pIVServer C type : CK_BYTE_PTR
	 */
	public CK_SSL3_KEY_MAT_OUT(long hClientMacSecret, long hServerMacSecret, long hClientKey, long hServerKey, Pointer pIVClient, Pointer pIVServer) {
		super();
		this.hClientMacSecret = hClientMacSecret;
		this.hServerMacSecret = hServerMacSecret;
		this.hClientKey = hClientKey;
		this.hServerKey = hServerKey;
		this.pIVClient = pIVClient;
		this.pIVServer = pIVServer;
	}
	public CK_SSL3_KEY_MAT_OUT(Pointer peer) {
		super(peer);
	}
	public static class ByReference extends CK_SSL3_KEY_MAT_OUT implements Structure.ByReference {
		
	};
	public static class ByValue extends CK_SSL3_KEY_MAT_OUT implements Structure.ByValue {
		
	};
}
