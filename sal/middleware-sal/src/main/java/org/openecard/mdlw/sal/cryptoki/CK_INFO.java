package org.openecard.mdlw.sal.cryptoki;
import com.sun.jna.NativeLong;
import com.sun.jna.Pointer;
import com.sun.jna.Structure;
import java.util.Arrays;
import java.util.List;
/**
 * <i>native declaration : pkcs11_v2.40/pkcs11t.h</i><br>
 * This file was autogenerated by <a href="http://jnaerator.googlecode.com/">JNAerator</a>,<br>
 * a tool written by <a href="http://ochafik.com/">Olivier Chafik</a> that <a href="http://code.google.com/p/jnaerator/wiki/CreditsAndLicense">uses a few opensource projects.</a>.<br>
 * For help, please visit <a href="http://nativelibs4java.googlecode.com/">NativeLibs4Java</a> , <a href="http://rococoa.dev.java.net/">Rococoa</a>, or <a href="http://jna.dev.java.net/">JNA</a>.
 */
public class CK_INFO extends Structure {
	/**
	 * Cryptoki interface ver<br>
	 * C type : CK_VERSION
	 */
	public CK_VERSION cryptokiVersion;
	public CK_VERSION getCryptokiVersion() {
		return cryptokiVersion;
	}
	public void setCryptokiVersion(CK_VERSION cryptokiVersion) {
		this.cryptokiVersion = cryptokiVersion;
	}
	/**
	 * blank padded<br>
	 * C type : CK_UTF8CHAR[32]
	 */
	public byte[] manufacturerID = new byte[32];
	public byte[] getManufacturerID() {
		return manufacturerID;
	}
	public void setManufacturerID(byte manufacturerID[]) {
		this.manufacturerID = manufacturerID;
	}
	/**
	 * must be zero<br>
	 * C type : CK_FLAGS
	 */
	public NativeLong flags;
	public NativeLong getFlags() {
		return flags;
	}
	public void setFlags(NativeLong flags) {
		this.flags = flags;
	}
	/**
	 * blank padded<br>
	 * C type : CK_UTF8CHAR[32]
	 */
	public byte[] libraryDescription = new byte[32];
	public byte[] getLibraryDescription() {
		return libraryDescription;
	}
	public void setLibraryDescription(byte libraryDescription[]) {
		this.libraryDescription = libraryDescription;
	}
	/**
	 * version of library<br>
	 * C type : CK_VERSION
	 */
	public CK_VERSION libraryVersion;
	public CK_VERSION getLibraryVersion() {
		return libraryVersion;
	}
	public void setLibraryVersion(CK_VERSION libraryVersion) {
		this.libraryVersion = libraryVersion;
	}
	public CK_INFO() {
		super();
	}
	 protected List<String> getFieldOrder() {
		return Arrays.asList("cryptokiVersion", "manufacturerID", "flags", "libraryDescription", "libraryVersion");
	}
	/**
	 * @param cryptokiVersion Cryptoki interface ver<br>
	 * C type : CK_VERSION<br>
	 * @param manufacturerID blank padded<br>
	 * C type : CK_UTF8CHAR[32]<br>
	 * @param flags must be zero<br>
	 * C type : CK_FLAGS<br>
	 * @param libraryDescription blank padded<br>
	 * C type : CK_UTF8CHAR[32]<br>
	 * @param libraryVersion version of library<br>
	 * C type : CK_VERSION
	 */
	public CK_INFO(CK_VERSION cryptokiVersion, byte manufacturerID[], NativeLong flags, byte libraryDescription[], CK_VERSION libraryVersion) {
		super();
		this.cryptokiVersion = cryptokiVersion;
		if ((manufacturerID.length != this.manufacturerID.length)) 
			throw new IllegalArgumentException("Wrong array size !");
		this.manufacturerID = manufacturerID;
		this.flags = flags;
		if ((libraryDescription.length != this.libraryDescription.length)) 
			throw new IllegalArgumentException("Wrong array size !");
		this.libraryDescription = libraryDescription;
		this.libraryVersion = libraryVersion;
	}
	public CK_INFO(Pointer peer) {
		super(peer);
	}
	public static class ByReference extends CK_INFO implements Structure.ByReference {
		
	};
	public static class ByValue extends CK_INFO implements Structure.ByValue {
		
	};
}
