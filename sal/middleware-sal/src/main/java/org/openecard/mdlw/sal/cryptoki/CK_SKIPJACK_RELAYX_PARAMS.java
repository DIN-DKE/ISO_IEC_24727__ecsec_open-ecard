package org.openecard.mdlw.sal.cryptoki;
import com.sun.jna.Pointer;
import com.sun.jna.Structure;
import java.util.Arrays;
import java.util.List;
/**
 * <i>native declaration : pkcs11_v2.40/pkcs11t.h</i><br>
 * This file was autogenerated by <a href="http://jnaerator.googlecode.com/">JNAerator</a>,<br>
 * a tool written by <a href="http://ochafik.com/">Olivier Chafik</a> that <a href="http://code.google.com/p/jnaerator/wiki/CreditsAndLicense">uses a few opensource projects.</a>.<br>
 * For help, please visit <a href="http://nativelibs4java.googlecode.com/">NativeLibs4Java</a> , <a href="http://rococoa.dev.java.net/">Rococoa</a>, or <a href="http://jna.dev.java.net/">JNA</a>.
 */
public class CK_SKIPJACK_RELAYX_PARAMS extends Structure {
	/** C type : CK_ULONG */
	public long ulOldWrappedXLen;
	public long getUlOldWrappedXLen() {
		return ulOldWrappedXLen;
	}
	public void setUlOldWrappedXLen(long ulOldWrappedXLen) {
		this.ulOldWrappedXLen = ulOldWrappedXLen;
	}
	/** C type : CK_BYTE_PTR */
	public Pointer pOldWrappedX;
	public Pointer getPOldWrappedX() {
		return pOldWrappedX;
	}
	public void setPOldWrappedX(Pointer pOldWrappedX) {
		this.pOldWrappedX = pOldWrappedX;
	}
	/** C type : CK_ULONG */
	public long ulOldPasswordLen;
	public long getUlOldPasswordLen() {
		return ulOldPasswordLen;
	}
	public void setUlOldPasswordLen(long ulOldPasswordLen) {
		this.ulOldPasswordLen = ulOldPasswordLen;
	}
	/** C type : CK_BYTE_PTR */
	public Pointer pOldPassword;
	public Pointer getPOldPassword() {
		return pOldPassword;
	}
	public void setPOldPassword(Pointer pOldPassword) {
		this.pOldPassword = pOldPassword;
	}
	/** C type : CK_ULONG */
	public long ulOldPublicDataLen;
	public long getUlOldPublicDataLen() {
		return ulOldPublicDataLen;
	}
	public void setUlOldPublicDataLen(long ulOldPublicDataLen) {
		this.ulOldPublicDataLen = ulOldPublicDataLen;
	}
	/** C type : CK_BYTE_PTR */
	public Pointer pOldPublicData;
	public Pointer getPOldPublicData() {
		return pOldPublicData;
	}
	public void setPOldPublicData(Pointer pOldPublicData) {
		this.pOldPublicData = pOldPublicData;
	}
	/** C type : CK_ULONG */
	public long ulOldRandomLen;
	public long getUlOldRandomLen() {
		return ulOldRandomLen;
	}
	public void setUlOldRandomLen(long ulOldRandomLen) {
		this.ulOldRandomLen = ulOldRandomLen;
	}
	/** C type : CK_BYTE_PTR */
	public Pointer pOldRandomA;
	public Pointer getPOldRandomA() {
		return pOldRandomA;
	}
	public void setPOldRandomA(Pointer pOldRandomA) {
		this.pOldRandomA = pOldRandomA;
	}
	/** C type : CK_ULONG */
	public long ulNewPasswordLen;
	public long getUlNewPasswordLen() {
		return ulNewPasswordLen;
	}
	public void setUlNewPasswordLen(long ulNewPasswordLen) {
		this.ulNewPasswordLen = ulNewPasswordLen;
	}
	/** C type : CK_BYTE_PTR */
	public Pointer pNewPassword;
	public Pointer getPNewPassword() {
		return pNewPassword;
	}
	public void setPNewPassword(Pointer pNewPassword) {
		this.pNewPassword = pNewPassword;
	}
	/** C type : CK_ULONG */
	public long ulNewPublicDataLen;
	public long getUlNewPublicDataLen() {
		return ulNewPublicDataLen;
	}
	public void setUlNewPublicDataLen(long ulNewPublicDataLen) {
		this.ulNewPublicDataLen = ulNewPublicDataLen;
	}
	/** C type : CK_BYTE_PTR */
	public Pointer pNewPublicData;
	public Pointer getPNewPublicData() {
		return pNewPublicData;
	}
	public void setPNewPublicData(Pointer pNewPublicData) {
		this.pNewPublicData = pNewPublicData;
	}
	/** C type : CK_ULONG */
	public long ulNewRandomLen;
	public long getUlNewRandomLen() {
		return ulNewRandomLen;
	}
	public void setUlNewRandomLen(long ulNewRandomLen) {
		this.ulNewRandomLen = ulNewRandomLen;
	}
	/** C type : CK_BYTE_PTR */
	public Pointer pNewRandomA;
	public Pointer getPNewRandomA() {
		return pNewRandomA;
	}
	public void setPNewRandomA(Pointer pNewRandomA) {
		this.pNewRandomA = pNewRandomA;
	}
	public CK_SKIPJACK_RELAYX_PARAMS() {
		super();
	}
	 protected List<String> getFieldOrder() {
		return Arrays.asList("ulOldWrappedXLen", "pOldWrappedX", "ulOldPasswordLen", "pOldPassword", "ulOldPublicDataLen", "pOldPublicData", "ulOldRandomLen", "pOldRandomA", "ulNewPasswordLen", "pNewPassword", "ulNewPublicDataLen", "pNewPublicData", "ulNewRandomLen", "pNewRandomA");
	}
	public CK_SKIPJACK_RELAYX_PARAMS(Pointer peer) {
		super(peer);
	}
	public static class ByReference extends CK_SKIPJACK_RELAYX_PARAMS implements Structure.ByReference {
		
	};
	public static class ByValue extends CK_SKIPJACK_RELAYX_PARAMS implements Structure.ByValue {
		
	};
}
