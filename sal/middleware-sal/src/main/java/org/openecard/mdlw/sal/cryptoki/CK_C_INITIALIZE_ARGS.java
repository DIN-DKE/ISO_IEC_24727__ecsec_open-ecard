package org.openecard.mdlw.sal.cryptoki;
import com.sun.jna.Pointer;
import com.sun.jna.Structure;
import org.openecard.mdlw.sal.cryptoki.CryptokiLibrary.CK_CREATEMUTEX;
import org.openecard.mdlw.sal.cryptoki.CryptokiLibrary.CK_DESTROYMUTEX;
import org.openecard.mdlw.sal.cryptoki.CryptokiLibrary.CK_LOCKMUTEX;
import org.openecard.mdlw.sal.cryptoki.CryptokiLibrary.CK_UNLOCKMUTEX;
import java.util.Arrays;
import java.util.List;
/**
 * <i>native declaration : pkcs11_v2.40/pkcs11t.h</i><br>
 * This file was autogenerated by <a href="http://jnaerator.googlecode.com/">JNAerator</a>,<br>
 * a tool written by <a href="http://ochafik.com/">Olivier Chafik</a> that <a href="http://code.google.com/p/jnaerator/wiki/CreditsAndLicense">uses a few opensource projects.</a>.<br>
 * For help, please visit <a href="http://nativelibs4java.googlecode.com/">NativeLibs4Java</a> , <a href="http://rococoa.dev.java.net/">Rococoa</a>, or <a href="http://jna.dev.java.net/">JNA</a>.
 */
public class CK_C_INITIALIZE_ARGS extends Structure {
	/** C type : CK_CREATEMUTEX */
	public CK_CREATEMUTEX CreateMutex;
	public CK_CREATEMUTEX getCreateMutex() {
		return CreateMutex;
	}
	public void setCreateMutex(CK_CREATEMUTEX CreateMutex) {
		this.CreateMutex = CreateMutex;
	}
	/** C type : CK_DESTROYMUTEX */
	public CK_DESTROYMUTEX DestroyMutex;
	public CK_DESTROYMUTEX getDestroyMutex() {
		return DestroyMutex;
	}
	public void setDestroyMutex(CK_DESTROYMUTEX DestroyMutex) {
		this.DestroyMutex = DestroyMutex;
	}
	/** C type : CK_LOCKMUTEX */
	public CK_LOCKMUTEX LockMutex;
	public CK_LOCKMUTEX getLockMutex() {
		return LockMutex;
	}
	public void setLockMutex(CK_LOCKMUTEX LockMutex) {
		this.LockMutex = LockMutex;
	}
	/** C type : CK_UNLOCKMUTEX */
	public CK_UNLOCKMUTEX UnlockMutex;
	public CK_UNLOCKMUTEX getUnlockMutex() {
		return UnlockMutex;
	}
	public void setUnlockMutex(CK_UNLOCKMUTEX UnlockMutex) {
		this.UnlockMutex = UnlockMutex;
	}
	/** C type : CK_FLAGS */
	public long flags;
	public long getFlags() {
		return flags;
	}
	public void setFlags(long flags) {
		this.flags = flags;
	}
	/** C type : CK_VOID_PTR */
	public Pointer pReserved;
	public Pointer getPReserved() {
		return pReserved;
	}
	public void setPReserved(Pointer pReserved) {
		this.pReserved = pReserved;
	}
	public CK_C_INITIALIZE_ARGS() {
		super();
	}
	 protected List<String> getFieldOrder() {
		return Arrays.asList("CreateMutex", "DestroyMutex", "LockMutex", "UnlockMutex", "flags", "pReserved");
	}
	/**
	 * @param CreateMutex C type : CK_CREATEMUTEX<br>
	 * @param DestroyMutex C type : CK_DESTROYMUTEX<br>
	 * @param LockMutex C type : CK_LOCKMUTEX<br>
	 * @param UnlockMutex C type : CK_UNLOCKMUTEX<br>
	 * @param flags C type : CK_FLAGS<br>
	 * @param pReserved C type : CK_VOID_PTR
	 */
	public CK_C_INITIALIZE_ARGS(CK_CREATEMUTEX CreateMutex, CK_DESTROYMUTEX DestroyMutex, CK_LOCKMUTEX LockMutex, CK_UNLOCKMUTEX UnlockMutex, long flags, Pointer pReserved) {
		super();
		this.CreateMutex = CreateMutex;
		this.DestroyMutex = DestroyMutex;
		this.LockMutex = LockMutex;
		this.UnlockMutex = UnlockMutex;
		this.flags = flags;
		this.pReserved = pReserved;
	}
	public CK_C_INITIALIZE_ARGS(Pointer peer) {
		super(peer);
	}
	public static class ByReference extends CK_C_INITIALIZE_ARGS implements Structure.ByReference {
		
	};
	public static class ByValue extends CK_C_INITIALIZE_ARGS implements Structure.ByValue {
		
	};
}
