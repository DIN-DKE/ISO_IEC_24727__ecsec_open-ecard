package org.openecard.mdlw.sal.cryptoki;

import com.sun.jna.NativeLong;
import com.sun.jna.Pointer;
import com.sun.jna.Structure;
import java.util.Arrays;
import java.util.List;

/**
 * <i>native declaration : pkcs11_v2.40/pkcs11t.h</i><br>
 * This file was autogenerated by
 * <a href="http://jnaerator.googlecode.com/">JNAerator</a>,<br>
 * a tool written by <a href="http://ochafik.com/">Olivier Chafik</a> that
 * <a href="http://code.google.com/p/jnaerator/wiki/CreditsAndLicense">uses a
 * few opensource projects.</a>.<br>
 * For help, please visit
 * <a href="http://nativelibs4java.googlecode.com/">NativeLibs4Java</a> ,
 * <a href="http://rococoa.dev.java.net/">Rococoa</a>, or
 * <a href="http://jna.dev.java.net/">JNA</a>.
 */
public class CK_SLOT_INFO extends Structure {
    /**
     * blank padded<br>
     * C type : CK_UTF8CHAR[64]
     */
    public byte[] slotDescription = new byte[64];

    public byte[] getSlotDescription() {
        return slotDescription;
    }

    public void setSlotDescription(byte slotDescription[]) {
        this.slotDescription = slotDescription;
    }

    /**
     * blank padded<br>
     * C type : CK_UTF8CHAR[32]
     */
    public byte[] manufacturerID = new byte[32];

    public byte[] getManufacturerID() {
        return manufacturerID;
    }

    public void setManufacturerID(byte manufacturerID[]) {
        this.manufacturerID = manufacturerID;
    }

    /** C type : CK_FLAGS */
    public NativeLong flags;

    public NativeLong getFlags() {
        return flags;
    }

    public void setFlags(NativeLong flags) {
        this.flags = flags;
    }

    /**
     * version of hardware<br>
     * C type : CK_VERSION
     */
    public CK_VERSION hardwareVersion;

    public CK_VERSION getHardwareVersion() {
        return hardwareVersion;
    }

    public void setHardwareVersion(CK_VERSION hardwareVersion) {
        this.hardwareVersion = hardwareVersion;
    }

    /**
     * version of firmware<br>
     * C type : CK_VERSION
     */
    public CK_VERSION firmwareVersion;

    public CK_VERSION getFirmwareVersion() {
        return firmwareVersion;
    }

    public void setFirmwareVersion(CK_VERSION firmwareVersion) {
        this.firmwareVersion = firmwareVersion;
    }

    public CK_SLOT_INFO() {
        super();
    }

    protected List<String> getFieldOrder() {
        return Arrays.asList("slotDescription", "manufacturerID", "flags", "hardwareVersion", "firmwareVersion");
    }

    /**
     * @param slotDescription
     *            blank padded<br>
     *            C type : CK_UTF8CHAR[64]<br>
     * @param manufacturerID
     *            blank padded<br>
     *            C type : CK_UTF8CHAR[32]<br>
     * @param flags
     *            C type : CK_FLAGS<br>
     * @param hardwareVersion
     *            version of hardware<br>
     *            C type : CK_VERSION<br>
     * @param firmwareVersion
     *            version of firmware<br>
     *            C type : CK_VERSION
     */
    public CK_SLOT_INFO(byte slotDescription[], byte manufacturerID[], NativeLong flags, CK_VERSION hardwareVersion,
            CK_VERSION firmwareVersion) {
        super();
        if ((slotDescription.length != this.slotDescription.length))
            throw new IllegalArgumentException("Wrong array size !");
        this.slotDescription = slotDescription;
        if ((manufacturerID.length != this.manufacturerID.length))
            throw new IllegalArgumentException("Wrong array size !");
        this.manufacturerID = manufacturerID;
        this.flags = flags;
        this.hardwareVersion = hardwareVersion;
        this.firmwareVersion = firmwareVersion;
    }

    public CK_SLOT_INFO(Pointer peer) {
        super(peer);
    }

    public static class ByReference extends CK_SLOT_INFO implements Structure.ByReference {

    };

    public static class ByValue extends CK_SLOT_INFO implements Structure.ByValue {

    };
}
